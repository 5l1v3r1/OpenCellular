from nute import utils
from opentest.server.service.iointerface_service import COMServiceClient
from datetime import timedelta
import os
import click

@click.group(help="This file contains all function use for ATE")
def group_entry():
    pass

##region create(serverport, com, baudrate)

@group_entry.command('create', help="before any other function")
@click.argument('serverport')
@click.argument('com')
@click.argument('baudrate')
def _cmd_create(*args, **kwargs):
    create(*args, **kwargs)

@utils.capture_print
def create(serverport, com, baudrate):
    with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
        client.create_service(com, baudrate)

##endregion create(serverport, com)

##region login(serverport, com, username, password, user_target, root_target, firsttout, secondtout)

@group_entry.command('login', help="Will return a 1 if login failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('username')
@click.argument('password')
@click.argument('user_target')
@click.argument('root_target')
@click.argument('firsttout')
@click.argument('secondtout')
def _cmd_login(*args, **kwargs):
    login(*args, **kwargs)

@utils.capture_print
def login(serverport, com, username, password, user_target, root_target, firsttout, secondtout):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		login = client.login(username=username, password=password, user_target=user_target, root_target=root_target, firsttout=firsttout, secondtout=secondtout)
	print(login)

##endregion login(serverport, com, username, password, user_target, root_target, firsttout, secondtout)

##region detect(serverport, com, timeout)

@group_entry.command('reset_detect', help="Will return a 1 if login failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('timeout')

def _cmd_detect(*args, **kwargs):
    detect(*args, **kwargs)

@utils.capture_print
def detect(serverport, com, timeout):
	reset_detect_bool(serverport, com, timeout)

def detect_bool(serverport, com, target, timeout=300):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		value = client.detect(target=target, timeout=timeout)
	return(value)

##endregion detect(serverport, com, timeout)

##region enteruboot(serverport, com, waitstr, password, ubootprompt)

@group_entry.command('enteruboot', help="Will return a 1 if enteruboot failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('waitstr')
@click.argument('password')
@click.argument('ubootprompt')
def _cmd_enteruboot(*args, **kwargs):
	enteruboot(*args, **kwargs)

@utils.capture_print
def enteruboot(serverport, com, waitstr, password, ubootprompt):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		enteruboot = client.enteruboot(waitstr=waitstr, password=password, ubootprompt=ubootprompt)
	print(enteruboot)

##endregion enteruboot(serverport, com, waitstr, password, ubootprompt)

##region setupuboot(serverport, com, envdict, ubootprompt)

@group_entry.command('setupuboot', help="Will return a 1 if setupuboot failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('envdict')
@click.argument('ubootprompt')
@click.option('--save', is_flag=True)
def _cmd_setupuboot(*args, **kwargs):
	setupuboot(*args, **kwargs)

@utils.capture_print
def setupuboot(serverport, com, envdict, ubootprompt, save=False):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		setupuboot = client.setupuboot(envdict=envdict, ubootprompt=ubootprompt, save=save)
	print(setupuboot)

##endregion setupuboot(serverport, com, envdict, ubootprompt)

##region resetfromuboot(serverport, com, resetstring)

@group_entry.command('resetfromuboot', help="Will return a 1 if resetfromuboot failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('resetstring')
def _cmd_resetfromuboot(*args, **kwargs):
	resetfromuboot(*args, **kwargs)

@utils.capture_print
def resetfromuboot(serverport, com, resetstring):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		resetfromuboot = client.resetfromuboot(resetstring=resetstring)
	print(resetfromuboot)

##endregion resetfromuboot(serverport, com, resetstring)

##region setdefaultubootvar(serverport, com, ubootprompt)

@group_entry.command('setdefaultubootvar', help="Will return a 1 if setdefaultubootvar failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('ubootprompt')
@click.option('--save', is_flag=True)
def _cmd_setupuboot(*args, **kwargs):
	setupuboot(*args, **kwargs)

@utils.capture_print
def setdefaultubootvar(serverport, com, ubootprompt, save=False):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		setdefaultubootvar = client.setdefaultubootvar(ubootprompt=ubootprompt, save=save)
	print(setdefaultubootvar)

##endregion setdefaultubootvar(serverport, com, ubootprompt)

##region setupubootwithfile(serverport, com, envfile, ubootprompt)

@group_entry.command('setupubootwithfile', help="Will return a 1 if setupubootwithfile failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('envfile')
@click.argument('ubootprompt')
@click.option('--save', is_flag=True)
def _cmd_setupubootwithfile(*args, **kwargs):
	setupubootwithfile(*args, **kwargs)

@utils.capture_print
def setupubootwithfile(serverport, com, envfile, ubootprompt, save=False):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		setupubootwithfile = client.setupubootwithfile(envfile=envfile, ubootprompt=ubootprompt, save=save)
	print(setupubootwithfile)

##endregion setupubootwithfile(serverport, com, envfile, ubootprompt)

##region updateuboot(serverport, com, updatefile, ubootprompt, usedhcp)

@group_entry.command('updateuboot', help="Will return a 1 if updateuboot failed, else 0")
@click.argument('serverport')
@click.argument('com')
@click.argument('updatefile')
@click.argument('ubootprompt')
@click.option('--dhcp', is_flag=True)
def _cmd_updateuboot(*args, **kwargs):
	updateuboot(*args, **kwargs)

@utils.capture_print
def updateuboot(serverport, com, updatefile, ubootprompt, usedhcp):
	with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
		updateuboot = client.updateuboot(updatefile=updatefile, ubootprompt=ubootprompt, usedhcp=usedhcp)
	print(updateuboot)

##endregion updateuboot(serverport, com, updatefile, ubootprompt, usedhcp)

##region target(serverport, com, timeout, msg, target)

@group_entry.command('target', help="send a msg and wait for a target for 'timeout' seconds")
@click.argument('serverport')
@click.argument('com')
@click.argument('timeout')
@click.argument('msg')
@click.argument('target')
@click.option('--info', is_flag=True)
def _cmd_target(*args, **kwargs):
    target(*args, **kwargs)

@utils.capture_print
def target(serverport, com, timeout, msg, target, info=False):
    with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
        msg = msg.replace("\\n", '\n')

        if info:
            #Print information (message, comport, timeout, target)
            print 'Message: ' + msg
            print 'COM: ' + com

            fulltimeout = timedelta(seconds = int(timeout))
            print 'Timeout: ' , str(fulltimeout), '(', timeout , ')'

            targethalf = len(target)/2
            targettoprint = target[:targethalf] + '&' + target[targethalf:]
            print 'Target (Split with &): ' + targettoprint


        print client.com_target(msg, target, timeout)

##endregion target(serverport, com, timeout, msg, target)

##region getip(serverport, com, eth)

@group_entry.command('getip', help="Will get IP")
@click.argument('serverport')
@click.argument('com')
@click.argument('eth')
def _cmd_getip(*args, **kwargs):
    addr(*args, **kwargs)

@utils.capture_print
def getip(serverport, com, eth):
    with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
        addr = client.com_get_ip(eth)
    print(addr)

##endregion getip(serverport, com, eth)

##region getmac(serverport, com, eth)

@group_entry.command('getmac', help="Will get MAC")
@click.argument('serverport')
@click.argument('com')
@click.argument('eth')
def _cmd_getmac(*args, **kwargs):
    addr(*args, **kwargs)

@utils.capture_print
def getmac(serverport, com, eth):
    with COMServiceClient(url=com, ip="127.0.0.1", port=serverport) as client:
        addr = client.com_get_mac(eth)
    print(addr)

##endregion getmac(serverport, com, eth)

if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
