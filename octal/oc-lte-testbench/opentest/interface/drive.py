from opentest.server.service.ssh_service import SSHServiceClient
from nute import utils
import click
import os


@click.group( help = "Function for the ATE")
def group_entry():
    pass

def mount(port, url, device, path, succes):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        #this command create a new direcectory (/tmp/test) that will be mount by the sd card
        path_folder_test = '{}/test'.format(path)
        cmd = 'mkdir {}'.format(path_folder_test)
        client.execute_command(cmd)

        #mount the sd card on the new directory
        cmd = 'mount -t vfat {} {}'.format(device,path_folder_test)
        resp = client.execute_command(cmd).strip()

        if resp != '' :
            pass

        #return the directory
        return path_folder_test

def validate(url, port, path_folder_test, succes):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:

        #file_path should be /tmp/test/driver_test_file at this point
        content = 'test32123'
        file_name = "/driver_test_file"
        path_file_test = "{}{}".format(path_folder_test,file_name)

        #file is created here
        cmd = "touch {}".format(path_file_test)
        client.execute_command(cmd)

        #this command writes in the new file
        client.write_file(path_file_test, content)

        #this command reads in the new file
        response = client.read_file(path_file_test).strip()


        #succes will equal to 1 if the the content written and read is the same and if the file is cleared correctly
        if response != content:
            succes = False

        return succes, path_folder_test, path_file_test

def unmount(port, url, device, path_folder_test, path_file_test, succes, path):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:

        content = 'test32123'

        #unmount the sd card
        cmd = "umount {}".format(device)
        client.execute_command(cmd)

        #test if unmount worked
        resp = client.read_file(path_file_test)

        if resp == content:
            succes = False

        #mount to delete the temporary directory named test
        cmd = 'mount -t vfat {} {}'.format(device, path_folder_test)
        client.execute_command(cmd)
        cmd_rm = 'rm {}'.format(path_file_test)
        client.execute_command(cmd_rm)

        #check if the file is remove correctly from the sd card
        cmd = 'ls {}'.format(path_folder_test)
        response = str(client.execute_command(cmd))
        resp = response.find("driver_test_file")
        if resp != -1:
            succes = False


        #unount sd card to close the test and remove the folder /temp/test
        cmd = "umount {}".format(device)
        client.execute_command(cmd)
        cmd_rm = 'rm -r {}'.format(path_folder_test)
        client.execute_command(cmd_rm)

        #check if the folder is remove correctly from the bb
        cmd = 'ls {}'.format(path)
        response = str(client.execute_command(cmd))
        resp = response.find("test")
        if resp != -1:
            succes = False

        return succes

##region test(port, url, devcie, path)
@group_entry.command('test', help = "Read temperature or current")
@click.argument('serverport')
@click.argument('url')
@click.argument('device')
@click.argument('path')
def _cmd_test(*args,**kwargs):
    test(*args,**kwargs)

@utils.capture_print
def test(port, url, device, path):
    succes = True
    path_folder_test = mount(port, url, device, path, succes)
    succes, path_folder_test, path_file_test = validate(url, port, path_folder_test,succes)
    succes = unmount(port, url,device, path_folder_test,path_file_test, succes, path)
    return succes
##endregion


if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
