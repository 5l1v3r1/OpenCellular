
from opentest.server.service.ssh_service import SSHServiceClient
from opentest.server.service.scp_service import SCPServiceClient
import re

# transfer a list of files to the target with optional post ssh commands, from provided text file list configfile
# localprepath and remoteprepath can be used to prepend to each file path if they are relative to make an absolute path
def filexferwithfile(context, configfile="", localprepath="", remoteprepath=""):
    with open(configfile) as f: lines = [line.strip() for line in f]
    for myitem in lines:
        if not (len(myitem) > 0 and myitem[0]=='#'):
            items = filter(None, re.split("[\r\n]+", myitem))
            if len(items) == 0:
                continue
            indices = [s.start() for s in re.finditer("\,", items[0])]
            # is "filename,localpath,remotepath,filecommand,filecmdtimeout" line format?
            assert len(indices) == 4, "Invalid transfer configuration file (missing parameters)"
            filename = myitem[0:indices[0]]
            localpath = myitem[indices[0]+1:indices[1]]
            remotepath = myitem[indices[1]+1:indices[2]]
            filecommand = myitem[indices[2]+1:indices[3]]
            filecmdtout = myitem[indices[3]+1:]
            if not (len(filename) == 0 and len(localpath) == 0 and len(remotepath) == 0):
                localpath = localprepath + localpath
                remotepath = remoteprepath + remotepath
                context.logger.debug("SCP file: %s, lpath: %s, rpath: %s" % (filename, localpath, remotepath))
                context.server.scp.putfile(filename, localpath, remotepath)
            if len(filecommand) > 0:
                ssh = context.server.ssh
                if len(filecmdtout) == 0:
                    resp = ssh.execute_command(filecommand).strip()
                else:
                    resp = ssh.execute_command(filecommand, timeout=float(filecmdtout)).strip()
                context.logger.debug('%s >>\n %s' % (filecommand,resp))
