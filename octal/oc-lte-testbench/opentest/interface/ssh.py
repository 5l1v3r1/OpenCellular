from opentest.server.service.base import ServiceClient
from opentest.server.service.ssh_service import SSHServiceResponse, SSHServiceClient
import os
from nute import utils
import click


@click.group( help = "Function for the ATE")
def group_entry():
    pass

##region create(port, url, ip, username, password)
@group_entry.command('create', help = "Create the service")
@click.argument('port')
@click.argument('url')
@click.argument('ip')
@click.argument('username')
@click.argument('password')
def _cmd_create_service(*args,**kwargs):
    create(*args,**kwargs)

@utils.capture_print
def create(port, url, ip, username, password):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        client.create_service(addresseip = ip, username_ssh = username, password_ssh = password)
##endregion

##region execute(port, url, cmd)
@group_entry.command('execute', help = "Execute the specified command")
@click.argument('port')
@click.argument('url')
@click.argument('cmd')
def _cmd_execute(*args,**kwargs):
    execute(*args,**kwargs)

@utils.capture_print
def execute(port, url, cmd):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        print(client.execute_command(cmd=cmd))
##endregion

##region file_exists(port, url, path)
@group_entry.command('file_exists', help = "Verify if the specified file or folder exist")
@click.argument('port')
@click.argument('url')
@click.argument('path')
def _cmd_file_exists(*args,**kwargs):
    file_exists(*args,**kwargs)

@utils.capture_print
def file_exists(port, url, path):
    with SSHServiceClient(port = port, ip_server = "127.0.0.1",url = url) as client:
        print(client.does_file_or_folder_exists(path=path))
##endregion

##region read_file(port, url, path)
@group_entry.command('read_file', help = "Read the specified command")
@click.argument('port')
@click.argument('url')
@click.argument('path')
def _cmd_read_file(*args,**kwargs):
    read_file(*args,**kwargs)

@utils.capture_print
def read_file(port, url, path):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        print(client.read_file(path = path))

##endregion

##region write_file(port, url, path,content)
@group_entry.command('write_file', help = "Write in the specified command")
@click.argument('port')
@click.argument('url')
@click.argument('path')
@click.argument('content')
def _cmd_write_file(*args,**kwargs):
    write_file(*args,**kwargs)

@utils.capture_print
def write_file(port, url, path, content):
    with SSHServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        client.write_file(path = path, content =content)
##endregion


##region main()
if __name__ == "__main__":
# This block pauses the command line when bad arguments are passed or when the
# main exits early.
# This is needed when the command line exits after execution, as it gives us
# time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
##endregion
