import re
import win32con
import win32gui
import time

class WindowManager():
    def __init__(self):
        self._handle = None

    def _window_enum_callback( self, hwnd, wildcard ):
        if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) != None:
            self._handle = hwnd

    #CASE SENSITIVE
    def find_window_wildcard(self, wildcard):
        self._handle = None
        win32gui.EnumWindows(self._window_enum_callback, wildcard)

    def set_foreground(self, timeout=10):
        time.sleep(0.5)
        win32gui.ShowWindow(self._handle, win32con.SW_RESTORE)
        win32gui.SetWindowPos(self._handle,win32con.HWND_NOTOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE + win32con.SWP_NOSIZE)
        win32gui.SetWindowPos(self._handle,win32con.HWND_TOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE + win32con.SWP_NOSIZE)
        win32gui.SetWindowPos(self._handle,win32con.HWND_NOTOPMOST, 0, 0, 0, 0, win32con.SWP_SHOWWINDOW + win32con.SWP_NOMOVE + win32con.SWP_NOSIZE)

        retries = timeout
        while retries >= 0:
            retries -= 1
            try:
                win32gui.SetForegroundWindow(self._handle)
                break
            except Exception:
                time.sleep(1)
                continue
        else:
            assert retries >= 0, "Timeout reached"


    def find_and_set(self, search):
        self.find_window_wildcard(search)
        self.set_foreground(10)
        # Need to be call twice
        #time.sleep(1)
        #self.set_foreground()
