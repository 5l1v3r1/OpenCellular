import json5
import re

class _EnbS1():
    name = "EnbS1"
    def __init__(self):
        self.parser = None

    def set_mme_addr(self, addr):
        if not re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", addr):
            raise ValueError("Provided IP address %s is not valid." % (addr))
        self.parser.add_entry("mme_addr", addr)
    #ENB
    def set_enb_id(self, enb_id):
        self.parser.add_entry("enb_id", enb_id)

class _NetworkId():
    name = "NetworkId"
    def __init__(self):
        self.parser = None

    def set_plmn(self, plmn):
        if not re.match(r"\d{5}", plmn) or len(plmn) != 5:
            raise ValueError("Provided PLMN %s is not valid." % (plmn))
        self.parser.add_entry("plmn",plmn)

    def set_mme_gid(self, group_id):
        self.parser.add_entry("mme_group_id", group_id)

    def set_mme_code(self, code):
        self.parser.add_entry("mme_code", code)

    def set_l_network(self, net_name):
        self.parser.add_entry("network_name", net_name)

    def set_s_network(self, net_name):
        self.parser.add_entry("network_short_name", net_name)

class _EnbCell():
    bw_dict = {1.4: (6, "sib23_rb6.asn"),
               3: (15, "sib23_rb15.asn"),
               5: (25, "sib23_rb25.asn"),
               10: (50, "sib23_rb50.asn"),
               15: (75, "sib23_rb50.asn"),
               20: (100, "sib23_rb100.asn")}
    name = "EnbCell"
    def __init__(self):
        self.parser = None

    def set_dl_earfcn(self, index, earfcn):
        """
        Sets the downlink earfcn for EPC config files\n
            index    (int) cell index\n
            earfcn   (int) dl earfcn value\n
        """
        try:
            cell_list = self.parser.get_entry("cell_list")
            cell_list[index]["dl_earfcn"] = earfcn
            self.parser.add_entry("cell_list", cell_list)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

    
    def set_cell_bw(self, index, bw):
        """
        Sets the bandwidth\n
            index    (int) cell index\n
            bw       (int) bandwidth value\n
        """
        if bw not in _EnbCell.bw_dict.keys():
            raise ValueError("Provided bandwidth of %d MHz is not supported." % (bw))
        try:
            cell_list = self.parser.get_entry("cell_list")
            cell_list[index]["n_rb_dl"] = _EnbCell.bw_dict[bw][0]
            cell_list[index]["sib_sched_list"] = [_EnbCell.bw_dict[bw][1]]
            self.parser.add_entry("cell_list", cell_list)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

class _EnbTm():
    name = "EnbTm"
    def __init__(self):
        self.parser = None

    def set_nantenna_dl(self, index, n_ant):
        """
        Sets the downlink earfcn for EPC config files\n
            index    (int) cell index\n
            n_ant    (int) nunber of downlink antennae\n
        """
        try:
            cell_list = self.parser.get_entry("cell_list")
            cell_list[index]["n_antenna_dl"] = n_ant
            self.parser.add_entry("cell_list", cell_list)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))


    def set_nantenna_ul(self, index, n_ant):
        try:
            cell_list = self.parser.get_entry("cell_list")
            cell_list[index]["n_antenna_ul"] = n_ant
            self.parser.add_entry("cell_list", cell_list)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

    
    def set_tm(self, index, tm):
        """
        Sets the transmission mode for EPC config files\n
            index    (int) cell index\n
            tm       (int) mode\n
        """
        try:
            cell_list = self.parser.get_entry("cell_list")
            cell_list[index]["transmission_mode"] = tm
            self.parser.add_entry("cell_list", cell_list)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

class _UeCell():
    name = "UeCell"
    def __init__(self):
        self.parser = None

    def set_cell_bw(self, bw):
        try:
            self.parser.add_entry("bandwidth", bw)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

    def set_dl_earfcn(self, index, earfcn):
        """
        Sets the downlink earfcn for UE config files\n
            index:  (int) cell index\n
            earfcn: (int) dl earfcn value\n
        """
        try:
            cells = self.parser.get_entry("cells")
            cells[index]["dl_earfcn"] = earfcn
            self.parser.add_entry("cells", cells)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.parser.filename, index))

class _UeTm():
    name = "UeTm"
    def __init__(self):
        self.parser = None

    def set_nantenna_dl(self, index, n_ant):
        try:
            cells = self.parser.get_entry("cells")
            cells[index]["n_antenna_dl"] = n_ant
            self.parser.add_entry("cells", cells)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.filename, index))

    
    def set_tm(self, index, tm):
        """
        Sets the transmission mode for UE config files\n
            index    (int) cell index\n
            tm       (int) mode\n
        """
        try:
            cells = self.parser.get_entry("cells")
            cells[index]["transmission_mode"] = tm
            self.parser.add_entry("cells", cells)
        except IndexError:
            raise IOError("File %s does not have %dth element in cell list" % (self.filename, index))

class _Com():
    name = "Com"

    def __init__(self):
        self.parser = None

    #EPC and ENB and UE
    def set_com_addr(self, addr, port):
        if not re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", addr):
            raise ValueError("Provided IP address %s is not valid." % (addr))
        self.parser.add_entry("com_addr", addr + ":" + port)

class _Gtp():
    name = "Gtp"
    def __init__(self):
        self.parser = None

    #EPC and ENB
    def set_gtp_addr(self,addr):
        if not re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$",addr):
            raise ValueError("Provided IP address %s is not valid." % (addr))
        self.parser.add_entry("gtp_addr",addr)



class _FunctionAdder(object):
    def __init__(self):
        self.modules_list = None

    def build(self,parser):
        for clz in self.modules_list:
            curr_instance = clz()
            setattr(curr_instance,'parser',parser)
            setattr(self,curr_instance.name,curr_instance)

    def __getattr__(self,name):
        if name not in self.modules_list:
            raise AttributeError("Object of type %s has no function package attribute named %s.  Available function packages are : %s"%(self.__class__.__name__,name," ".join([a.name for a in self.modules_list])))

class _BaseParser(object):
    LOADED = True

    def __init__(self):
        self.j_dict = None
        self.extensions = {}
        self.filename = ""

    # Decorator to handle file IO and dictionary IO functions to ensure proper behavior
    def file_loaded(load_required):
        def _file_loaded(function):
            def check_loaded(self, *args, **kwargs):
                if not self.is_loaded() and load_required:
                    raise IOError("Cannot process.  Object JSON dictionnary is empty.  Must load a file first.")
                if self.is_loaded() and not load_required:
                    raise IOError("Cannot process.  Object JSON dictionnary is not empty.  Config file has already been loaded.")
                return function(self, *args, **kwargs)
            return check_loaded
        return _file_loaded

    def is_loaded(self):
        try:
            return bool(self.j_dict)
        # If the object is not instantiated, an AttributeError is raised
        except AttributeError:
            return False

    @file_loaded(not LOADED)
    def load_config(self, filename):
        with open(filename, "r") as f:
            f_content = f.read()
        self.extensions['includes'] = re.findall(r'include.+,', f_content)
        f_content_filtered = re.sub(r'include.+,', '', f_content)
        # Add additional extensions here if needed (support only first layer keywords)
        self.j_dict = json5.loads(f_content_filtered)
        self.filename = filename

    @file_loaded(LOADED)
    def add_entry(self, key, value):
        self.j_dict[key] = value

    @file_loaded(LOADED)
    def add_license(self, ip_address):
        license_dict = {"server_addr": ip_address}
        self.add_entry("license_server", license_dict)

    @file_loaded(LOADED)
    def get_entry(self, key):
        return self.j_dict[key]

    @file_loaded(LOADED)
    def dump_to_file(self, filename):
        header = ""
        for include in self.extensions['includes']:
            header += include + '\n'

        f_content = json5.dumps(self.j_dict).replace('{', '{' + header, 1)

        with open(filename, 'w') as f:
            f.write(f_content)


def _create_cfg_class(modules_list,name):
    """
    Builds a parser class with the tools given as argument\n
        modules_list:   modules to be added in the toolset\n
        name:           name of the toolset\n

    Ex:\n
        \tenb_cfg = EnbCfg()\n
        \tenb_config.parser.add_entry...\n
        \tenb_config.EnbCell.set_cell_bw...\n
    """
    class InheritedClass(_FunctionAdder):
        def __init__(self):
            super(InheritedClass,self).__init__()
            self.__class__.__name__ = name
            self.modules_list = modules_list
            self.parser = _BaseParser()
            self.build(self.parser)

    return InheritedClass

"""
Classes constructors
    ex: 
"""
EnbCfg = _create_cfg_class([_EnbCell,_EnbTm,_Com,_Gtp,_EnbS1],"EnbCfg")

EpcCfg = _create_cfg_class([_NetworkId,_Com,_Gtp],"EpcCfg")

UeCfg = _create_cfg_class([_UeCell,_UeTm,_Com],"UeCfg")

#DriverCfg = _create_cfg_class([],"DriverCfg")

#AsnCfg = _create_cfg_class([],"AsnCfg")
