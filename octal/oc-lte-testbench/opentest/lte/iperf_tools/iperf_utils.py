# Credit for Iperf_Parser : https://github.com/DoctorSher/python-iperf
# Assumes the output file is already in the folder
from math import floor
import json
from subprocess import call as p_call, check_output
from opentest.services.ssh_service import SSHServiceClient
import os.path
from numpy import std

IPERF_PATH = os.path.dirname(__file__) + r"\support\iperf3.exe"

#IPERF_PATH = r"C:\GIT_Files\src\opentest\opentest\lte\iperf_tools\support\iperf3.exe"
class Iperf_Parser(object):
    """ A class to extract any useful information from the iperf3
    json output. Then users can access whatever fields they
    are interested in. """
    def __init__(self):
        self.raw_data = {}
        self.sent_bps = 0
        self.received_bps = 0
        self.bytes = 0
        self.runLength = 0
        self.intervalBPS = []
        self.intervalLength = 0
        self.hostUtilization = 0
        self.remoteUtilization = 0
        self.sdev = 0
        self.local_host = ""
        self.local_port = ""
        self.remote_host = ""
        self.remote_port = ""
    
    def extract(self, data):
        try:
            self.raw_data = data
            self.sent_bps = data['end']['sum_sent']['bits_per_second']
            self.received_bps = data['end']['sum_received']['bits_per_second']
            self.bytes = data['end']['sum_received']['bytes']
            self.runLength = data['end']['sum_received']['seconds']
            self.hostUtilization = data['end']['cpu_utilization_percent']['host_total'] / 100.0
            self.remoteUtilization = data['end']['cpu_utilization_percent']['remote_total'] / 100.0
            self.intervalLength = floor(data['intervals'][0]['sum']['seconds'])
            sdev_array = []
            for i in range(1, len(data['intervals'])):
                sdev_array.append(data['intervals'][i]['sum']['bits_per_second'])
            self.sdev = std(sdev_array)
            self.local_host = data['start']['connected'][0]['local_host']
            self.local_port = data['start']['connected'][0]['local_port']
            self.remote_host = data['start']['connected'][0]['remote_host']
            self.remote_port = data['start']['connected'][0]['remote_port']
            for i in xrange(len(data['intervals'])):
                self.intervalBPS.append(data['intervals'][i]['sum']['bits_per_second'])
        except KeyError:
            raise KeyError("iperf test failed")

    def extract_from_string(self, string):
        """
        Assigns object attributes to data from the dictionary\n
            - data (json) obtained from json.load/loads\n
        Use extract_from_file(file) if extracting json from file\n
        """
        return self.extract(json.loads(string))

    def extract_from_file(self, file):
        """
        Assigns object attributes to data from the dictionary in file\n
            - file (string) path with file name\n
        Use extract(data) if extracting json from variable\n
        """
        with open(file) as dataFile:
            result = self.extract(json.load(dataFile))
        return result

    def __string__(self):
        temp_str ="""Bits per second : %s\nBytes transfered : %s\n""" % (self.received_bps, self.bytes)
        return temp_str

class Iperf_Launcher(object):

    def __init__(self, ssh_interf):
        assert issubclass(type(ssh_interf), SSHServiceClient), "ssh_interf expects type %s" % SSHServiceClient.__name__
        self.ssh_interf = ssh_interf
        self.parser = Iperf_Parser()

    # Launch iperf server on local Windows machine
    def iperf_launch_server_local(self,arguments, logfile,pid_file):
        proc_args = ["start","/B", IPERF_PATH,"-s","-J","--logfile",logfile,"-I",pid_file]
        proc_args.extend(arguments.split(" "))
        #print proc_args
        p_call(proc_args,shell=True)

    # Launch iperf server on remote Linux machine
    def iperf_launch_server_remote(self, password, iperf_script_path, logfile=None, arguments=None):
        proc_args = " ".join(["sudo", "nohup", "bash", iperf_script_path, "-s"])
        if logfile is not None:
            proc_args += " " + " ".join(["-J --logfile", logfile, "-I", "pid.txt"])
        if arguments is not None:
            proc_args += " " + " ".join([str(arg) for arg in arguments])
        raw_output = self.ssh_interf.execute_command(proc_args, stdin=[password], get_pty=True)
        return raw_output

    # Run iperf client on local Windows machine
    def iperf_run_client_local(self,target_ip, logfile=None, arguments=None):
        proc_args = " ".join(["start","/b", IPERF_PATH,"-c", target_ip])
        if logfile is not None:
            proc_args += " " + " ".join(["-J --logfile", logfile])
        if arguments is not None:
            proc_args += " " + " ".join([str(arg) for arg in arguments])
        check_output(proc_args, shell=True)

    # Run iperf client on local Windows machine in reverse test
    def iperf_run_client_local_reverse(self,target_ip, logfile=None, arguments=None):
        proc_args = " ".join(["start", "/b", IPERF_PATH, "-c", target_ip, "-J", "-R"])
        if logfile is not None:
            proc_args += " " + " ".join(["-J --logfile", logfile])
        if arguments is not None:
            proc_args += " " + " ".join([str(arg) for arg in arguments])
        check_output(proc_args,shell=True)

    # Run iperf client on remote Linux machine
    def iperf_run_client_remote(self, password, iperf_script, target_ip, logfile=None, arguments=None):
        proc_args = " ".join(["sudo", "bash", iperf_script, "-c", target_ip])
        if logfile is not None:
            proc_args += " " + " ".join(["-J", "--logfile", logfile])
        if arguments is not None:
            proc_args += " " + " ".join([str(arg) for arg in arguments])
        raw_output = self.ssh_interf.execute_command(proc_args, stdin=[password], get_pty=True)
        return raw_output

    # Get process ID for local iperf server on Windows
    def iperf_get_pid(self, file_name):
        pid = ""
        with open(file_name, "rb") as pid_file:
            pid = pid_file.read().replace('\x00', '')
        return pid

    # Task kill iperf server on local Windows machine
    def iperf_taskkill(self,pid):
        proc_args = ["start","/B", "taskkill","/F","/pid",pid]
        p_call(proc_args,shell=True)

    # Process kill iperf server on remote Linux machine
    def iperf_killremote(self, password):
        raw_output = self.ssh_interf.execute_command("sudo pkill iperf3",stdin=[password], get_pty=True)
        return raw_output
