import json
from interfaces.BASE_INTERF import *
import time

class BASE_WS(object):

    def __init__(self,ws_interface):
        self.ws_interface = ws_interface

    def connect(self):
        try:
            self.ws_interface.connect()
        except Exception as e:
            raise WSNoConnectError("Unable to connect to WebSocket host: " + e.message)

    def send_custom(self,command):
        return self.ws_interface.send_rcv(command)

    def close(self):
        self.ws_interface.close()

    def config_get(self):
        msg = {}
        msg['message'] = 'config_get'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def stats_get(self):
        msg = {}
        msg['message'] = 'stats'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def log_get(self,min_r=1,max_r=4096,timeout=1,rnti=None,ue_id=None):
        msg = {}
        msg['message'] = 'log_get'
        msg['min'] = str(min_r)
        msg['max'] = str(max_r)
        msg['timeout'] = str(timeout)

        if rnti is not None:
            msg['rnti'] = str(rnti)

        if ue_id is not None:
            msg['ue_id'] = str(ue_id)

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)


class EPC_WS(BASE_WS):

    def __init__(self,ws_interface):
        super(EPC_WS,self).__init__(ws_interface)
        self.ue_list = []
        self.enb_list = []

    def ue_get(self):
        msg = {}
        msg['message'] = 'ue_get'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)['ue_list']

    def ue_del(self, imsi):
        msg = {}
        msg['message'] = 'ue_del'
        msg['imsi'] = imsi

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def ue_detach(self, imsi, type_da="2", cause="3"):
        msg = {}
        msg['message'] = 'ue_detach'
        msg['imsi'] = imsi
        msg['type'] = type_da
        msg['cause'] = cause

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def enb(self):
        msg = {}
        msg['message'] = 'enb'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)['enb_list']

    def wait_ue_connect(self, IMEISV, timeout, poll_seconds):
        ue_found = False
        ue_ip = None
        while(timeout > 0):
            ue_ip = self.ue_get_ip(IMEISV)
            if ue_ip is not None:
                return ue_ip
            timeout -= poll_seconds
            time.sleep(poll_seconds)
        raise UETimeoutError("UE connection timeout.")

    def ue_get_ip(self,IMEISV):
        ue_list = self.ue_get()
        for d in ue_list:
            if d['imeisv'] == IMEISV:
                if "bearers" not in d.keys():
                    break
                return d['bearers'][0]['ip']
        return None


class ENB_WS(BASE_WS):

    def __init__(self,ws_interface):
        super(ENB_WS,self).__init__(ws_interface)

        self.ue_list = []

    def ue_get(self):
        msg = {}
        msg['message'] = 'ue_get'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)['ue_list']

    def cell_gain_set(self,cell_id,gain):
        if cell_id <=0 or gain < -200 or gain > 0:
            raise ENBGainRangeError("eNB gain must be between -200 and 0.")

        msg = {}
        msg['message'] = 'cell_gain'
        msg['cell_id'] = cell_id
        msg['gain'] = gain

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return raw_result

    def handover(self,enb_ue_id,pci,dl_earfcn,h_type="auto"):
        allowed_types = ["auto","intra","s1","x2"]
        if not h_type in allowed_types:
            raise TypeError("%s not within allowed types for handover.",h_type)

        msg = {}
        msg['message'] = 'handover'
        msg['enb_ue_id'] = enb_ue_id
        msg['pci'] = pci
        msg['dl_earfcn'] = dl_earfcn
        msg['type'] = h_type

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return raw_result

    def x2(self):
        msg = {}
        msg['message'] = 'x2'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def s1(self):
        msg = {}
        msg['message'] = 's1'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

class UE_WS(BASE_WS):

    def __init__(self,ws_interface):
        super(UE_WS,self).__init__(ws_interface)

    def pdn_connect(self,apn,auth,username,passw):

        auth_list = ['none','pap','chap']

        if auth.lower() not in auth_list:
            raise NameError('Authentication type %s not recognized.' % (auth))

        msg = {}
        msg['message'] = 'pdn_connect'
        msg['apn'] = apn
        msg['authentication'] = auth
        msg['username'] = username
        msg['password'] = passw

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def pdn_disconnect(self,apn):
        msg = {}
        msg['message'] = 'pdn_disconnect'
        msg['apn'] = apn

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def power_on(self,ue_id):
        msg = {}
        msg['message'] = 'power_on'
        msg['ue_id'] = ue_id

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def power_off(self,ue_id):
        msg = {}
        msg['message'] = 'power_off'
        msg['ue_id'] = ue_id

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def ue_get(self, ue_id=None):
        msg = {}
        msg['message'] = 'ue_get'

        if ue_id is not None:
            msg['ue_id'] = str(ue_id)

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def rf_set_tx(self,tx_gain):

        if tx_gain < -200 or tx_gain > 0:
            raise ValueError('TX Gain value of %d is not between -200 and 0.' % (tx_gain))

        msg = {}
        msg['message'] = 'rf'
        msg['tx_gain'] = str(tx_gain)

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def rf_set_rx(self,rx_gain):

        if rx_gain < -200 or rx_gain > 0:
            raise ValueError('RX Gain value of %d is not between -200 and 0.' % (rx_gain))

        msg = {}
        msg['message'] = 'rf'
        msg['rx_gain'] = str(rx_gain)

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

    def rf_get(self):
        msg = {}
        msg['message'] = 'rf'

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)


    def ext_app(self,ue_id,msg_id,start_time,end_time,prog,args):
        msg = {}
        msg['message'] = 'ext_app'
        msg['message_id'] = msg_id
        msg['ue_id'] = str(ue_id)
        msg['start_time'] = str(start_time)
        msg['end_time'] = str(end_time)
        msg['prog'] = prog
        msg['args'] = args

        raw_result = self.ws_interface.send_rcv(json.dumps(msg))
        return json.loads(raw_result)

class LS_WS(BASE_WS):
    pass

class ENBGainRangeError(Exception):
    pass

class UETimeoutError(RuntimeError):
    pass
