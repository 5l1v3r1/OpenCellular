import json
from collections import namedtuple

class _StringJSON():
    def __init__(self, message=""):
        self.warning = 'Built-in type was returned(casted to string in message)'
        self.message = message

class Bunch(object):
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

class JSONError(Exception):
    pass

def _json_object_hook(d): return namedtuple('X', d.keys())(*d.values())
def json_to_object(json_string):
    if not json_string:
        return None
    else:
        return json.loads(json_string, object_hook=_json_object_hook)

def dict_to_json(json_dict):
    try:
        return json.dumps(json_dict)
    except:
        non_builtins_string = []
        for key, value in json_dict.iteritems():
            if hasattr(value, '__dict__'):
                non_builtins_string = non_builtins_string + ["%s=%s" % (key, str(value))]
        if non_builtins_string:
            raise JSONError("Object contains non built-in types: %s" % ', '.join(non_builtins_string))
        else:
            raise

def object_to_json(json_object):
    if json_object is None:
        return None
    json = ""
    try:
        json = dict_to_json(json_object.__dict__)
    except AttributeError:
        #no __dict__ attribute
        raise JSONError("Unable to encode %s into json, no __dict__ attribute." % str(type(json_object)))

    return  json
