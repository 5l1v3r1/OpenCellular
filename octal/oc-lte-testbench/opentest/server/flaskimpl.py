
from flask import Flask, request, Response
from base import *



class FlaskServer(Flask):

    def __init__(self, name, port):
        Flask.__init__(self, name)
        self.port = port
        self.logger.setLevel(logging.WARNING)
        self.service_server = GenericServer()
        self.service_server.enable_file_logs()

    def start(self):
        self.routes()
        self.run(port=self.port)
        #run returns when the server is dead
        if not self.service_server.dead:
            self.service_server.shutdown()

    def shutdown_server(self):
        func = request.environ.get('werkzeug.server.shutdown')
        if func is None:
            raise RuntimeError('Not running with the Werkzeug Server')
        func()

    def routes(self):
        @self.route('/')
        def index_route():
            resp = ""
            return "Running on port " + str(self.port) + "\n" + resp

        @self.route('/service/<url>', methods=['GET', 'PUT', 'POST'])
        def service_route_with_url(url):
            return service_route(url)

        @self.route('/service', methods=['GET', 'PUT', 'POST'])
        def service_route_without_url():
            return service_route(None)

        def service_route(url):
            req_content = self.format_request(request)
            resp = None
            stream_mode = request.args.get('stream')
            shell_mode = request.args.get('shell')
            if request.method == 'GET':
                #Web page display - Not really used yet
                resp = self.service_server.get_service(url=url, content_json=None)
            elif request.method == 'PUT':
                if stream_mode:
                    #Polling mode, essentially reduced logging
                    resp = self.service_server.stream_route(url=url, content_json=req_content)
                elif shell_mode:
                    #Shell mode, uses the msg attribute of the request.
                    resp = self.service_server.interactive_shell(url=url, content_json=req_content)
                else:
                    #Actual service requests
                    resp = self.service_server.service(url=url, content_json=req_content)
            elif request.method == 'POST':
                #Creation of a new service
                resp = self.service_server.new_service(url=url, content_json=req_content)
            return self.format_response(resp)

        @self.route('/config', methods=['POST'])
        def config():
            req_content = self.format_request(request)
            resp = self.service_server.server_config(content_json=req_content)
            return self.format_response(resp)

        @self.route('/shutdown', methods=['POST'])
        def shutdown():
            req_content = self.format_request(request)
            resp = self.service_server.shutdown(content_json=req_content)
            self.shutdown_server()
            return self.format_response(resp)

        @self.route('/openlogs', methods=['POST'])
        def openlogs():
            req_content = self.format_request(request)
            resp = self.service_server.launch_tail_log(content_json=req_content)
            return self.format_response(resp)

    def format_request(self, req):
        return req.data

    def format_response(self, generic_resp):
        resp = Response(generic_resp.body, mimetype='')
        resp.status_code=generic_resp.status_code
        return resp
