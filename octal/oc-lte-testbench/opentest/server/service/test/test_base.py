
from opentest.server.base import *
from opentest.server.service.base import *
from opentest.server.test.test_base import ExistingService2, A_SERVICE_UUID_2, A_RESPONSE
from nute import utils
from mock import Mock, MagicMock
import unittest

THIS_FOLDER = os.path.dirname(__file__)

class TestServiceClient(unittest.TestCase):

    def __init__(self, *args, **kwargs):
        unittest.TestCase.__init__(self, *args, **kwargs)
        self.url = "url"
        self.server = None
        self.direct_interface = None
        self.client = None

    def setUp(self):
        import_paths = [THIS_FOLDER, os.path.join(utils.nute_root(), r'opentest\server\test')]
        self.server = GenericServer(handle_exceptions=False, service_factory=ServiceFactory(additionnal_import_paths = import_paths))
        self.direct_interface = DirectServiceClientInterface()
        self.client = ServiceClient(interface=self.direct_interface, url=self.url, server=self.server)

    def test_new_service(self):
        self.assertNotIn(self.url, self.server.service_dict)

        self.client.new_service(url=self.url, uuid=A_SERVICE_UUID_2)

        self.assertIn(self.url, self.server.service_dict)

    def test_service(self):
        self.client.new_service(url=self.url, uuid=A_SERVICE_UUID_2)
        status, resp = self.client.service(url=self.url)
        self.assertEqual(A_RESPONSE, resp.message)

    def test_service_calls_stream_close(self):
        self.direct_interface.stream_close = Mock(return_value=None)
        with self.client as client:
            client.new_service(url=self.url, uuid=A_SERVICE_UUID_2)

        self.direct_interface.stream_close.assert_called()

    def _create_service_on_server(self):
        service = ExistingService2(self.url)
        self.server.service_dict[self.url] = service
        return service
'''
    def test_simple_stream(self):
        service = self._create_service_on_server()
        def stream(content):
            return "hello"
        service.stream_poll = Mock(side_effect=stream)

        with self.client as client:
            done = threading.Event()
            def callback(message):
                done.set()

            client.poll(callback, 0.1, 0, url=self.url)
            self.assertTrue(done.wait(timeout=1.0), "Timeout")
            self.assertTrue(done.is_set())'''
