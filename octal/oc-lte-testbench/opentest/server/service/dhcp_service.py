from base import *
import datetime
import os
import subprocess
import re

DHCP_SERVICE_UUID = "dhcp"

class DHCPService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.supply = None
        self.stream_interval = 0.5
        self.log_time = datetime.datetime.now()

    def service_config(self, config):
        try:
            path = os.path.dirname(os.path.realpath(__file__))
            indices = [s.start() for s in re.finditer("\.", config.localip)]
            if len(indices) is not 3:
                self.logger.error("Invalid dhcp server localip address")
                raise
            nth_entry = indices[2]
            iprange="DHCP_Range=" + config.localip[0:nth_entry+1] + "1-" + config.localip[0:nth_entry+1] + str(int(config.localip[nth_entry+1:])-1)
            fullfilename = os.path.join(path, "support", "dhcp", "OpenDHCPServer.ini")
            f = open(fullfilename)
            fstr = f.read()
            f.close
            lines = fstr.splitlines()
            fstr2=""
            nextline = "none"
            linecnt = 0
            rangedone = 0
            for line in lines:
                if nextline == "ip":
                    lines[linecnt]=config.localip
                    nextline = "none"
                if nextline == "range":
                    lines[linecnt]=iprange
                    nextline = "none"
                if line.find('[LISTEN_ON]') >= 0:
                    nextline = "ip"
                if rangedone == 0 and line.find('[RANGE_SET]') >= 0:
                    rangedone = 1
                    nextline = "range"
                fstr2 += lines[linecnt]
                fstr2 += "\r\n"
                linecnt += 1
            f2 = open(fullfilename,'wb')
            f2.write(fstr2)
            f2.close
            fullfilename = os.path.join(path, "support", "dhcp", "OpenDHCPServer.exe")
            self.process = subprocess.Popen(fullfilename + " -v")
            self.quick_log("DHCP server live")
        except:
            self.logger.error("No DHCP server found")
            raise

    def service_shutdown(self):
        self.process.terminate()
        self.quick_log("DHCP server killed")

    def get_response_from_current_values(self):
        response = DCSupplyServiceResponse()
        response.vout = self.supply.GetVOut()
        response.voutsetting = self.supply.GetVoltageCfg()
        response.on = self.supply.GetEnabledOutput()
        return response

    def stream_poll(self, request):
        return self.get_response_from_current_values()

    @staticmethod
    def service_uuid():
        return DHCP_SERVICE_UUID

class DHCPServiceClient(ServiceClient):

    def __init__(self,*args, **kwargs):
        ServiceClient.__init__(self,*args, **kwargs)

    def create_service(self, localip):
        status, resp = self.new_service(uuid= DHCPService.__name__, localip=localip)
        assert status < 400, "Unable to create DHCP Service"
