from base import *
import telnetlib


class TelnetServiceConfig():
    def __init__(self):
        self.addr = ""
        self.username = ""
        self.password = ""
        self.port = 21

class TelnetServiceRequest():
    def __init__(self):
        self.command = ""
        self.timeout = -1
        self.expect_kw = []

class TelnetServiceResponse():
    def __init__(self):
        self.output = ""
        self.kw_found = ""

TELNET_SERVICE_UUID = "telnet"

class TelnetService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.tn = None
        self.addr = None
        self.port = None
        self.username = None
        self.addr = None

    def service_config(self, config):
        self.addr = self.extract_param(config, "addr")
        self.username = self.extract_param(config, "username", default="")
        self.password = self.extract_param(config, "password", default="")
        self.port = self.extract_param(config, "port", default=21)
        self.logger.info("All parameters present")
        self.connect()

    def connect(self):
        self.logger.info("Initiating Telnet connection at %s", self.addr)
        try:
            self.tn = telnetlib.Telnet(self.addr, self.port)
        except Exception as e:
            raise ServiceError("Unable to connect to Telnet host: " + e.message)

    def is_connected(self):
        try:
            self.tn.write("\r\n")
		# If the Telnet object is not connected, an AttributeError is raised
        except AttributeError:
            return False
        else:
			return True

    def try_close(self):
        try:
            self.logger.info("Closing Telnet connection")
            self.tn.close()
        except:
            pass

    def telnet_client_connected(function):
        def check_connected(*args, **kwargs):
            _self = args[0]
            if not _self.is_connected():
                _self.logger.info("Connection is no longer alive")
                _self.connect()
            return function(*args, **kwargs)

        return check_connected

    @telnet_client_connected
    def service_handle(self, request):
        command = self.extract_param(request, "command", default="")
        timeout = self.extract_param(request, "timeout", default=10)
        expect_kw = self.extract_param(request, "expect_kw", default=[])
        output = ""
        kw_match = None
        index = -1
        if command != "":
            self.logger.info("Timeout is %.1fs. Expecting: %s . Sending command: %s", timeout,', '.join(expect_kw), command)
            self.tn.write(command)
            index, kw_match, output = self.tn.expect(expect_kw,timeout)
            self.logger.debug("Found keyword: %s \nOutput:\n %s", kw_match, output)
        else:
            self.logger.info("No command specified")
        resp = TelnetServiceResponse()
        resp.output = output
        resp.kw_found = kw_match.group(0) #Raises error if no command specified
        return resp

    def stream_poll(self, request):
        raise NotImplementedError

    def service_shutdown(self):
        self.try_close()

    @staticmethod
    def service_uuid():
        return TELNET_SERVICE_UUID

class TelnetServiceClient(ServiceClient):

    def create_service(self, addresseip ,port_tn, username_tn="", password_tn=""):
        status, resp = self.new_service(uuid = TelnetService.__name__, addr=addresseip, port=port_tn,username=username_tn, password = password_tn)
        assert status < 400

    def execute_command(self, cmd,timeout=10,kw=[]):
        status, resp = self.service(command=cmd,timeout=timeout,expect_kw=kw)
        return resp.output, resp.kw_found
