from base import *
from support.dcsupply_utils import DcDcConverter
import datetime

class DCSupplyServiceConfig():
    def __init__(self):
        self.interface_name = ""

class DCSupplyServiceRequest():
    '''
    :param setvout: (optional) Numeric value of the voltage which is to be set at the output of the dcsupply. Keeps current value by default
    :param seton: (optional) Boolean value to set on or off the output of the supply
    '''
    def __init__(self):
        self.setvout = -1
        self.seton = True

class DCSupplyServiceResponse():
    '''
    :param vout: Current DC Supply voltage
    :param voutsetting: Current vout setpoint
    :param on: If the supply is on or not
    '''
    def __init__(self):
        self.vout = 0
        self.voutsetting = 0
        self.on = False

class DCSupplyError(ServiceError):
    pass

DC_SUPPLY_SERVICE_UUID = "dcsupply"

class DCSupplyService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.supply = None
        self.stream_interval = 0.5
        self.log_time = datetime.datetime.now()
        self.last_setvout = 0

    def service_config(self, config):
        self.try_creating_supply()

    def try_creating_supply(self, retries=3):
        while True:
            try:
                self.supply = DcDcConverter(1, 0.1, 2, logger = self.logger.getChild('dcdc'))
                self.quick_log("SUCCESS")
                return
            except Exception as e:
                retries = retries - 1
                if retries > 0:
                    self.logger.warning("Retrying (%d retries left)" % retries)
                else:
                    self.logger.error("Max retries reached")
                    raise ServiceError(e.message)

    def service_shutdown(self):
        self.supply.CloseDevice()

    def service_handle(self, request):
        setvout = self.extract_param(request, 'setvout', default=None, default_none_allowed=True)
        seton = self.extract_param(request, 'seton', default=None, default_none_allowed=True)

        if setvout is not None:
            self.quick_log("Vout=%.2f" % setvout)
            self.last_setvout = setvout
            self.supply.SetVOutVolatile(setvout)

        if seton is not None:
            self.quick_log("Out ON=%s" % str(seton))
            self.supply.SetEnabledOutput(seton)
            time.sleep(0.1) #seton need a little bit of time to change

        return self.get_response_from_current_values()

    def get_response_from_current_values(self):
        response = DCSupplyServiceResponse()
        response.vout = self.supply.GetVOut()
        response.voutsetting = self.last_setvout
        response.on = self.supply.GetEnabledOutput()
        return response

    def stream_poll(self, request):
        return self.get_response_from_current_values()


    @staticmethod
    def service_uuid():
        return DC_SUPPLY_SERVICE_UUID


class DCSupplyServiceClient(ServiceClient):

    def __init__(self,*args, **kwargs):
        ServiceClient.__init__(self,*args, **kwargs)
        self.setVoutsetting = 0

    def create_service(self, supplyname="dcsupply"):
        status, resp = self.new_service(uuid= DCSupplyService.__name__, supplyname=supplyname)

    def setenable(self,enable_control):
        status, resp = self.service(seton = bool(enable_control))
        return resp.on

    def setvoltage(self,voltage_control):
        status, resp = self.service(setvout = voltage_control)
        return resp.voutsetting

    def getvoltage(self):
        status, resp = self.service()
        return resp.vout

    def getenable(self):
        status, resp = self.service()
        return resp.on

    def getsetvout(self):
        return self.setVoutsetting
