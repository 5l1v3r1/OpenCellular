from base import *
from opentest.equipment import i2cexedirectory
import subprocess


class I2CPodServiceConfig():
    def __init__(self):
        self.interface_name = ""

class I2CPodServiceRequest():
    def __init__(self):
        self.rw_func = False
        self.slave_addr = ""
        self.memory_length = ''
        self.slave_mem_addr = ""

        self.data_length = '' #only for read mode
        self.data = '' #only for write mode

class I2CPodServiceResponse():
    def __init__(self):
        self.read = ""
        self.func = ""
        self.sa = ""
        self.ga = ""
        self.mem_length = ""
        self.dl = ""
        self.dat = ""

class I2CPodError(ServiceError):
    pass

I2CPOD_SERVICE_UUID = "i2cpod"

class I2CPodService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.direc = i2cexedirectory.directory()

    def service_config(self, config):
        pass

    def service_handle(self, request):
        resp = I2CPodServiceResponse()
        rw_func = self.extract_param(request, 'rw_func', default=False)
        slave_addr = self.extract_param(request, 'slave_addr', default="")
        memory_length = self.extract_param(request, 'memory_length', default=None, default_none_allowed=True)
        slave_mem_addr = self.extract_param(request, 'slave_mem_addr', default=None, default_none_allowed=True)
        data_length = self.extract_param(request, 'data_length', default=None, default_none_allowed=True)
        data = self.extract_param(request, 'data', default=None, default_none_allowed=True)


        resp.sa = slave_addr
        resp.ga = slave_mem_addr
        resp.mem_length = memory_length

        if rw_func: #command = write
            call_list = [os.path.join(self.direc, "i2c.exe"), 'w', '-s:%s' %  slave_addr, '-a:%s:%s' % (memory_length,slave_mem_addr) , data]
            subprocess.Popen(call_list, stdout=subprocess.PIPE, shell=False)
            resp.func = 'write'
            resp.dat = data

        else: #command = read
            call_list = [os.path.join(self.direc, "i2c.exe"), 'r', '-s:%s' %  slave_addr, '-a:%s:%s' % (memory_length,slave_mem_addr) ,'-d:%s' % data_length]
            proc = subprocess.Popen(call_list, stdout=subprocess.PIPE, shell=False)
            resp.read = proc.stdout.read()
            resp.dl = data_length
            resp.func = 'read'

        return resp

    @staticmethod
    def service_uuid():
        return I2CPOD_SERVICE_UUID


class I2CPodServiceClient(ServiceClient):

    def create_service(self):
        status, resp = self.new_service(uuid= I2CPodService.__name__)

    def write(self, slave_addr, memory_length, slave_mem_addr, data):
        status, resp = self.service(rw_func = True, slave_addr= slave_addr, memory_length= memory_length, slave_mem_addr= slave_mem_addr, data = data)
        return resp.func, resp.sa, resp.mem_length, resp.ga, resp.dat

    def read(self, slave_addr, memory_length, slave_mem_addr, data_length):
        status, resp = self.service(rw_func = False, slave_addr= slave_addr, memory_length= memory_length, slave_mem_addr= slave_mem_addr, data_length = data_length)
        return resp.func, resp.sa, resp.mem_length, resp.ga, resp.dl, resp.read
