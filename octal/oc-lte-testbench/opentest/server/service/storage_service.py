from base import *
import socket
import time

class StorageServiceRequest():
    def __init__(self):
        self.store = None

class StorageServiceResponse():
    def __init__(self):
        self.storage = {}

class StorageService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.storage = {}

    def service_config(self, config):
        pass

    def service_handle(self, request):

        store = self.extract_param(request, "store", default=None, default_none_allowed=True)
        print(store)
        if store != None:
            self.storage = store

        resp = StorageServiceResponse()
        resp.storage = self.storage
        return resp

class StorageServiceClient(ServiceClient):

    def create_service(self):
        status, resp = self.new_service(uuid = StorageService.__name__)
        assert status < 400

    def store(self, storage=None):
        import pickle, StringIO
        new_storage = None
        if storage:
            output = StringIO.StringIO()
            pickle.dump(storage, output)
            new_storage = output.getvalue()
        status, resp = self.service(store=new_storage)
        in_value = StringIO.StringIO(resp.storage)
        return_storage = pickle.load(in_value)
        return return_storage

    def get(self):
        return self.store()
