from base import *
import datetime
import os
import subprocess
import re


TFTP_SERVICE_UUID = "tftp"

class TFTPService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.supply = None
        self.stream_interval = 0.5
        self.log_time = datetime.datetime.now()

    def service_config(self, config):
        path = os.path.dirname(os.path.realpath(__file__))
        indices = [s.start() for s in re.finditer("\.", config.localip)]
        if len(indices) is not 3:
            self.logger.error("Invalid tftp server localip address")
            raise
        nth_entry = indices[2]
        iprange=config.localip[0:nth_entry+1] + "1-" + config.localip[0:nth_entry+1] + "254"
        readonly_filename = os.path.join(path, "support", "tftp", "_readonly_OpenTFTPServerMT.ini")
        f = open(readonly_filename, 'rb')
        self.fstr = f.read()
        f.close
        lines = self.fstr.splitlines()
        fstr2=""
        nextline = "none"
        linecnt = 0
        for line in lines:
            if nextline == "ip":
                lines[linecnt]=config.localip
                nextline = "none"
            if nextline == "home":
                lines[linecnt]=config.tftpfolder
                nextline = "none"
            if nextline == "range":
                lines[linecnt]=iprange
                nextline = "none"
            if line.find('[LISTEN-ON]') >= 0:
                nextline = "ip"
            if line.find('[HOME]') >= 0:
                nextline = "home"
            if line.find('[ALLOWED-CLIENTS]') >= 0:
                nextline = "range"
            fstr2 += lines[linecnt]
            fstr2 += "\r\n"
            linecnt += 1

        filename = os.path.join(path, "support", "tftp", "OpenTFTPServerMT.ini")
        f2 = open(filename,'wb')
        f2.write(fstr2)
        f2.close
        fullfilename = os.path.join(path, "support", "tftp", "OpenTFTPServerMT.exe")
        self.process = subprocess.Popen(fullfilename + " -v")

    def service_shutdown(self):
        self.process.terminate()

    def get_response_from_current_values(self):
        response = DCSupplyServiceResponse()
        response.vout = self.supply.GetVOut()
        response.voutsetting = self.supply.GetVoltageCfg()
        response.on = self.supply.GetEnabledOutput()
        return response

    def stream_poll(self, request):
        return self.get_response_from_current_values()

    @staticmethod
    def service_uuid():
        return TFTP_SERVICE_UUID

class TFTPServiceClient(ServiceClient):

    def __init__(self,*args, **kwargs):
        ServiceClient.__init__(self,*args, **kwargs)

    def kill(self):
        self.new_service(uuid= TFTPService.__name__, reservation=True)

    def create_service(self, localip, tftpfolder):
        status, resp = self.new_service(uuid= TFTPService.__name__, localip=localip, tftpfolder=tftpfolder)
        assert status < 400, "Unable to create TFTP Service"
