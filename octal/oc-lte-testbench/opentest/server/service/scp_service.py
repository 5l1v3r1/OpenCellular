from base import *
from scp import SCPClient
import paramiko


SCP_SERVICE_UUID = "scp"

class SCPService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.scp = None
        self.addr = None
        self.username = None
        self.password = None
        self.scpclient = None

    def service_config(self, config):
        self.addr = self.extract_param(config, "addr")
        self.username = self.extract_param(config, "username")
        self.password = self.extract_param(config, "password")
        self.port = self.extract_param(config, "port", default=22)
        self.timeout = self.extract_param(config, "timeout", default=10)
        self.connect()

    def connect(self):
        self.logger.info("Initiating SSH connection at %s", self.addr)
        self.scp = paramiko.SSHClient()
        self.scp.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.scp.connect(hostname=self.addr,port=self.port,username=self.username,password=self.password)
        self.scpclient = SCPClient(self.scp.get_transport(), socket_timeout=self.timeout)

    def is_connected(self):
        return self.scp.get_transport().is_active()

    def try_close(self):
        try:
            self.logger.info("Closing SCP connection")
            self.scp.close()
        except:
            pass

    def scp_client_connected(function):
        def check_connected(*args, **kwargs):
            _self = args[0]
            if not _self.is_connected():
                _self.logger.info("Connection is no longer alive")
                _self.connect()
            return function(*args, **kwargs)
        return check_connected

    @scp_client_connected
    def service_handle(self, request):
        cmd = self.extract_param(request, "cmd", default=None, default_none_allowed=True)
        fil = self.extract_param(request, "file", default=None, default_none_allowed=True)
        localpath = self.extract_param(request, "localpath", default=None, default_none_allowed=True)
        remotepath = self.extract_param(request, "remotepath", default=None, default_none_allowed=True)

        if cmd is not None:
            if cmd == "put":
                self.quick_log('Put ' + fil + ' from ' + localpath + ' to ' + remotepath)
                resp = self.scpclient.put(os.path.join(localpath,fil) , os.path.join(remotepath,fil), True)
            elif cmd == "get":
                print 'Get - Put file ' + fil
                raise NotImplementedError

        return resp

    def service_shutdown(self):
        self.try_close()

    @staticmethod
    def service_uuid():
        return SCP_SERVICE_UUID

class SCPServiceClient(ServiceClient):

    def create_service(self, addresseip , username_ssh, password_ssh, timeout):
        status, resp = self.new_service(uuid = SCPService.__name__, addr=addresseip, username=username_ssh, password = password_ssh, timeout=timeout)
        assert status < 400

    def getfile(self, file, localpath, remotepath):
        status, resp = self.service(cmd = "get", file=file, localpath=localpath, remotepath=remotepath )
        return resp

    def putfile(self, file, localpath, remotepath):
        status, resp = self.service(cmd = "put", file=file, localpath=localpath, remotepath=remotepath )
        return resp
