from base import *
from websocket import create_connection

class WSServiceConfig():
    def __init__(self):
        self.addr = ""
        self.username = ""
        self.password = ""
        self.port = 21

class WSServiceRequest():
    def __init__(self):
        self.command = ""
        self.timeout = -1
        self.expect_kw = []

class WSServiceResponse():
    def __init__(self):
        self.output = ""

WS_SERVICE_UUID = "websocket"

class WSService(Service):
    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.ws_handle = None
        self.addr = None
        self.port = None
        self.username = None
        self.password = None

    def service_config(self, config):
        self.addr = self.extract_param(config, "addr")
        self.port = self.extract_param(config, "port")
        self.username = self.extract_param(config, "username",default=None)
        self.password = self.extract_param(config, "password",default=None)
        self.logger.info("All parameters present")
        #self.connect()

    def connect(self):
        self.logger.info("Initiating WebSocket connection at %s", self.addr)
        try:
            self.ws_handle = create_connection("ws://"+self.addr+":"+self.port,timeout=3)
        except Exception as e:
            raise ServiceError("Unable to connect to WebSocket host: " + e.message)

    def is_connected(self):
        try:
            return self.ws_handle.connected
		# If the WebSocket object is not instantiated, an AttributeError is raised
        except AttributeError:
            return False

    def try_close(self):
        try:
            self.logger.info("Closing WebSocket connection")
            self.ws_handle.close()
        except:
            pass

    def websocket_client_connected(function):
        def check_connected(*args, **kwargs):
            _self = args[0]
            if not _self.is_connected():
                _self.logger.info("Connection is no longer alive")
                _self.connect()
            return function(*args, **kwargs)

        return check_connected

    @websocket_client_connected
    def service_handle(self, request):
        command = self.extract_param(request, "command", default="")
        output = ""
        self.connect()
        if command != "":
            self.logger.info("Sending command: %s", command)
            self.ws_handle.send(command)
            output = self.ws_handle.recv()
            self.logger.debug("Output:\n %s", output)
        else:
            self.logger.info("No command specified")
        self.try_close()
        resp = WSServiceResponse()
        resp.output = output
        return resp

    def stream_poll(self, request):
        raise NotImplementedError

    def service_shutdown(self):
        self.try_close()

    @staticmethod
    def service_uuid():
        return WS_SERVICE_UUID

class WebSocketServiceClient(ServiceClient):

    def create_service(self, addresseip ,port_ws, username_ws="", password_ws=""):
        status, resp = self.new_service(uuid = WSService.__name__, addr=addresseip,port=port_ws, username=username_ws, password = password_ws)
        assert status < 400

    def execute_command(self, cmd):
        status, resp = self.service(command=cmd)
        return resp.output
