
import unittest
from opentest.server.jsonutils import *

class TestJsonObject:
    def __init__(self):
        pass

class TestJsonUtils(unittest.TestCase):

    def test_object_to_json_to_object(self):
        a_name = 'test'
        a_number = 67
        a_service = [('com', 'any'), ('ssh', 'any')]

        #Json keys cannot be changed for the test. key 'name' will be mapped with json_object.name
        #Test is hard-coded
        a_dict = {'name' : a_name, 'number' : a_number, 'service' : [{'url' : a_service[0][0], 'params': a_service[0][1]}, {'url' : a_service[1][0], 'params': a_service[1][1]}]}

        object = TestJsonObject()
        object.__dict__ = a_dict
        json = object_to_json(object)
        json_object = json_to_object(json)
        self.assertEqual(a_name, json_object.name)
        self.assertEqual(a_number, json_object.number)
        for service_index in range(0,2):
            self.assertEqual(a_service[service_index][0], json_object.service[service_index].url)
            self.assertEqual(a_service[service_index][1], json_object.service[service_index].params)

    def test_object_to_json_accepts_none(self):
        json = object_to_json(None)
        self.assertIsNone(json)

    def test_json_to_object_accepts_none(self):
        obj = json_to_object(None)
        self.assertIsNone(obj)

    def test_json_to_object_accepts_empty_json(self):
        obj = json_to_object("{}")
        self.assertIsInstance(obj, object)
