
import unittest
import logging
from opentest.server.base import *
from opentest.server.service.base import *
from mock import Mock, MagicMock
import __builtin__

#logging.disable(logging.CRITICAL)

__builtin__.SERVER_LOGGER_NAME = "TEST"
'''SUPPORT CLASSES'''

THIS_FOLDER = os.path.dirname(__file__)

A_SERVICE_UUID = "ExistingService"
class ExistingService(Service):

    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.config = None

    def service_config(self, config):
        self.config = config

    def service_handle(self, request):
        pass

    def get_config(self):
        return self.config


A_SERVICE_UUID_CHILD = "ExistingServiceChild"
class ExistingServiceChild(ExistingService):
    pass

A_SERVICE_UUID_CHILD_CHILD = "ExistingServiceChildChild"
class ExistingServiceChildChild(ExistingServiceChild):
    pass

A_SERVICE_UUID_2 = "ExistingService2"
A_RESPONSE = "resp"
class ExistingService2(Service):

    def __init__(self, url, **kwargs):
        Service.__init__(self, url, **kwargs)
        self.config = None

    def service_config(self, config):
        self.config = config

    def service_handle(self, request):
        return GenericResponseBody(message=A_RESPONSE)

    def get_config(self):
        return self.config



'''TESTCASES'''

class TestGenericServer(unittest.TestCase):

    def setUp(self):
        import_paths = [THIS_FOLDER, os.path.join(utils.nute_root(), r'opentest\server\test')]
        self.server = GenericServer(handle_exceptions=False, service_factory=ServiceFactory(additionnal_import_paths = import_paths))


    def test_unable_to_create_service_invalid_uuid(self):
        request = NewServiceRequest()
        request.uuid = "does_not_exists"

        self.assertIsInstance(self.server.new_service(url="url", content_object=request), GenericResponse)
        self.assertIsInstance(self.server.new_service(url="url", content_object=None), GenericResponse)

    def test_service_handle_called(self):
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False

        self.server.new_service(url="url", content_object=request)

        response = self.server.service(url="url", content_object=None)

        #message is raw object returned (String)
        self.assertNotIn("{", response.body.message)
        self.assertNotIn("}", response.body.message)
        self.assertIn(A_RESPONSE, response.body.message)

    def test_service_json_handle(self):
        server = self.server
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False

        server.new_service(url="url", content_object=request)

        response = server.service(url="url", content_json=None, handle_exceptions=False)

        #message wrapped in json
        self.assertIn("{", response.body)
        self.assertIn("}", response.body)
        self.assertIn(A_RESPONSE, response.body)

    def test_service_no_content(self):
        server = self.server
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False
        a_url = "url"

        server.new_service(url=a_url, content_object=request)
        server.service_dict[a_url]

        resp = server.service(url=a_url)

    def test_invalid_json(self):
        server = self.server
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False
        a_url = "url"
        invalid_json = "{\"hello\":\"}"

        json_response = server.service(url=a_url, content_json="{\"hello\":\"}")
        self.assertIsInstance(json_response, ErrorResponse)

    def test_service_accepts_url_in_content(self):
        server = self.server
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False

        server.new_service(url="url", content_object=request)
        request = GenericRequest()
        request.url = "url"

        response = server.service(content_object=request)

        #message wrapped in json
        self.assertEqual(A_RESPONSE, response.body.message)


    def test_service_raises_ServiceError_400(self):
        self._check_service_catches_exception_with_status_code(ServiceError, 400)

    def test_service_raise_Exception_500(self):
        self._check_service_catches_exception_with_status_code(Exception, 500)

    def _check_service_catches_exception_with_status_code(self, error_type, status_expected):
        server = self.server
        request = NewServiceRequest()
        request.uuid = A_SERVICE_UUID_2
        request.file_log = False
        a_url = "url"

        server.new_service(url=a_url, content_object=request)
        service = server.service_dict[a_url]

        service.service_handle = Mock(side_effect=error_type())

        resp = server.service(url=a_url, content_object=None)
        self.assertEqual(str(error_type.__name__), resp.body.exception_type)
        self.assertEqual(status_expected, resp.status_code)


class TestServiceFactory(unittest.TestCase):

    def test_service_finds_importerror_service(self):
        with self.assertRaises(ImportError):
            #This should raise an exception because of importerror_service.py which raises an ImportError
            #Do not ignore import errors, and remove default factory folder, in case a default service already creates ImportError
            factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER], import_factory_folder=False, ignore_import_errors=False)

    def test_service_returned_not_none(self):

        factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER])

        service = factory.new_service("url", None, uuid=A_SERVICE_UUID)

        self.assertIsNotNone(service)
        self.assertIsInstance(service, ExistingService)

    def test_service_does_not_call_config(self):

        factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER])
        config = "a_config"
        service = factory.new_service("url", config, uuid=A_SERVICE_UUID)

        self.assertIsInstance(service, ExistingService)
        self.assertIsNone(service.get_config())

    def test_service_sets_url(self):

        factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER])
        url = "a_url"
        service = factory.new_service(url, "config", uuid=A_SERVICE_UUID)

        self.assertIsInstance(service, ExistingService)
        self.assertIs(url, service.service_url())

    def test_service_no_uuid(self):
        factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER])
        class DumbObject():
            def __init__(self):
                self.uuid = None

        valid_uuid = A_SERVICE_UUID
        invalid_uuid = "wdsfdsfsdfsd"

        valid_config = DumbObject()
        valid_config.uuid = valid_uuid
        invalid_config = DumbObject()

        #Validate cases where uuid is invalid or None
        self.assertRaises(ServiceError, factory.new_service, "url", valid_config, uuid=invalid_uuid)
        self.assertRaises(ServiceError, factory.new_service, "url", None)
        self.assertRaises(ServiceError, factory.new_service, "url", invalid_config)

        #If no uuid param passed, searches in config object
        service = factory.new_service("url", valid_config)
        self.assertIsInstance(service, ExistingService)

        #If a uuid param is passed, should priorize it over the config object
        service = factory.new_service("url", None, uuid=valid_uuid)
        self.assertIsInstance(service, ExistingService)

    def test_service_child_detection(self):
        factory = ServiceFactory(additionnal_import_paths = [THIS_FOLDER])

        #simple inheritance
        valid_uuid = A_SERVICE_UUID_CHILD

        service = factory.new_service("url", None, uuid=valid_uuid)

        self.assertIsInstance(service, ExistingServiceChild)

        #Double inheritance
        valid_uuid = A_SERVICE_UUID_CHILD_CHILD

        service = factory.new_service("url", None, uuid=valid_uuid)

        self.assertIsInstance(service, ExistingServiceChildChild)

    def test_full_describing_path(self):
        factory = ServiceFactory()

        service = factory.new_service("url", None, uuid='opentest.server.test.test_base.ExistingService')

        self.assertIsInstance(service, ExistingService)
