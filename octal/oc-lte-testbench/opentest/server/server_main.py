from flaskimpl import FlaskServer
import os, sys
import serverinterface
import subprocess
import serverinterface
import click


@click.group(help="""Main entry point to launch a Service Server. Depending on options,
                    the server main be launched in the current context or in a completely
                    separate process.""")
def group_entry():
    pass

##region start(serverport, name)

@group_entry.command('start', help="Start the server in this shell window.") #Sets the command name and help message
@click.argument('serverport')# REQUIRED FOR ALL COMMANDS
@click.option('-n', '--name', help="The name of the server", default="anonymous")# Developper defined
def _cmd_start(*args, **kwargs):
    start(*args, **kwargs)


def start(serverport, name, *args, **kwargs):
    from base import server_init
    server = server_init(name, serverport)
    serverinterface.standalone_server_cli("127.0.0.1", serverport)
    server.start()

##endregion

##region launch(serverport, name, configfile)

@group_entry.command('launch', help="Launches the server in a separate shell window. If a server exists at the specified port, it will be killed.") #Sets the command name and help message
@click.argument('serverport', type=int)# REQUIRED FOR ALL COMMANDS
@click.option('-n', '--name', help="The name of the server", default="anonymous")# Developper defined
def _cmd_launch(*args, **kwargs):
    launch(*args, **kwargs)

def launch(serverport, name, *args, **kwargs):# Developper defined
    interface = serverinterface.ServerInterface(addr= '127.0.0.1', port=serverport)
    interface.kill_if_alive()

    #Launches the server in a separate process using the batch file launchserver.bat

    path_script = os.path.realpath(__file__)#Path of current file
    python_path = sys.executable
    args = [python_path, "-m", __name__, "start", str(serverport),"-n", name]

    process = subprocess.Popen(args, creationflags=subprocess.CREATE_NEW_CONSOLE)

    #Wait for server to be alive
    try:
        interface.assert_alive()
    except Exception as e:
        #Relaunch to catch output for DEBUG
        process = subprocess.Popen(args,stderr=subprocess.PIPE, creationflags=subprocess.CREATE_NEW_CONSOLE)
        out, err = process.communicate()
        raise Exception("Server failed to launch. Output:\n%s" % err)

##endregion


if __name__ == "__main__":
    group_entry()
