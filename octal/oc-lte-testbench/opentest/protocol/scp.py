from opentest.server.service.scp_service import SCPServiceClient
from nute import utils
import os
import click

@click.group(help="This file contains all function use for ATE")
def group_entry():
    pass

##region create(serverport, addresseip , username_ssh, password_ssh, timeout)
@utils.capture_print
@group_entry.command('create', help="before any other function")
@click.argument('serverport')
@click.argument('addresseip')
@click.argument('username_ssh')
@click.argument('password_ssh')
@click.argument('timeout')
def _cmd_create(*args, **kwargs):
    create(*args, **kwargs)

def create(serverport, addresseip , username_ssh, password_ssh, timeout=10):
    with SCPServiceClient(url="scp", ip="127.0.0.1", port=serverport) as client:
        client.create_service(saddresseip=saddresseip , username_ssh=username_ssh, password_ssh=password_ssh, timeout=timeout)

##endregion create(serverport, addresseip , username_ssh, password_ssh, timeout)

##region getfile(serverport, file, localpath, remotepath)
@utils.capture_print
@group_entry.command('getfile', help="before any other function")
@click.argument('serverport')
@click.argument('file')
@click.argument('localpath')
@click.argument('remotepath')
def _cmd_getfile(*args, **kwargs):
    getfile(*args, **kwargs)

def getfile(serverport, file, localpath, remotepath):
    with SCPServiceClient(url="scp", ip="127.0.0.1", port=serverport) as client:
        resp=client.getfile(file=file, localpath=localpath, remotepath=remotepath)
    return resp
##endregion getfile(serverport, file, localpath, remotepath)

##region putfile(serverport, file, localpath, remotepath)
@utils.capture_print
@group_entry.command('putfile', help="before any other function")
@click.argument('serverport')
@click.argument('file')
@click.argument('localpath')
@click.argument('remotepath')
def _cmd_getfile(*args, **kwargs):
    putfile(*args, **kwargs)

def putfile(serverport, file, localpath, remotepath):
    with SCPServiceClient(url="scp", ip="127.0.0.1", port=serverport) as client:
        resp=client.putfile(file=file, localpath=localpath, remotepath=remotepath)
    return resp
##endregion putfile(serverport, file, localpath, remotepath)

if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
