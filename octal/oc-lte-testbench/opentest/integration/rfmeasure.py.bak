
from opentest.server.service.visa_service import *
from calib_utils import PathLosses

class ManualLossRFSwitch():

    def __init__(self, context):
        self.loss = PathLosses()
        self.context = context
        self.last_key = None

    def create_service(self, path_file=None, loss_file=None): #type_ini: None = file.ini
        if loss_file:
            self.load_loss_from_file(loss_file)

    def set_switch_path(self, patha, pathb):
        if self.last_key != self.loss.get_key(patha, pathb):
            display_patha = self.display_string(patha)
            display_pathb = self.display_string(pathb)
            self.context.wait_tester_feedback('Link %s with %s. Make sure all unit connectors are terminated.' % (display_patha, display_pathb))
            self.last_key = self.loss.get_key(patha, pathb)
        return self.loss.get_key(patha, pathb)

    def display_string(self, string):
        replaced = string.replace('1', '2')
        replaced = replaced.replace('0', '1')
        return replaced


    def add_loss(self, key, value):
        loss = self.loss.get_loss_key(key)
        return value + loss

    def load_loss_from_file(self, path_file):
        return self.loss.load_from_file(path_file)

def create_rfswitch(context):
    try:
        context.server.rfswitch.create_service(context.RFSWITCH_PATH_FILE, loss_file=context.RFSWITCH_LOSS_FILE)
    except Exception as e:
        context.logger.warning('Unable to create rfswitch service: %s' % str(e))
        context.server.rfswitch = ManualLossRFSwitch(context)
        context.server.rfswitch.create_service(loss_file=context.RFSWITCH_LOSS_FILE)

def create_generator(context):
    try:
        context.server.generator.create_service(context.GENERATOR_INSTRUMENT)
        context.server.generator.reset()
        context.server.spectrum.setup_attenuation(mech_atten=context.SPECTRUM_MECHANICAL_ATTEN)
    except Exception as e:
        context.logger.warning('Unable to create generator service: %s' % str(e))

def create_spectrum(context):
    try:
        context.server.spectrum.create_service(context.SPECTRUM_INSTRUMENT)
        context.server.spectrum.reset()
    except Exception as e:
        context.logger.warning('Unable to create spectrum service: %s' % str(e))

def set_spectrum_path(context, path, tx):
    tx_str = '%s%d' % (path, tx)
    ret_val = context.server.rfswitch.set_switch_path('SPECTRUM', tx_str)
    assert ret_val, "RFSwitch must be of type LossRFSwitch[...] for LTE"
    #FIXME - manually hardcoded for a 3ft cable and a switch
	#loss = context.server.rfswitch.loss.get_loss_key(ret_val)
	loss = 25
    context.logger.debug("Spectrum linked with %s. %.2f dB loss" % (tx_str, loss))
    context.server.spectrum.set_loss(loss)

def set_generator_path(context, path, tx):
    tx_str = '%s%d' % (path, tx)
    ret_val = context.server.rfswitch.set_switch_path('GENERATOR', tx_str)
    assert ret_val, "RFSwitch must be of type LossRFSwitch[...] for LTE"
    loss = context.server.rfswitch.loss.get_loss_key(ret_val)
    context.logger.debug("Generator linked with %s. %.2f dB loss" % (tx_str, loss))
    context.server.generator.set_loss(loss)

class ComponentTester(object):
    """
    This tester is meant to test the response of rf components to different signals.
    It requires both a signal generator and a spectrum analyzer.
    """
    def __init__(self, gen=None, spec=None):
        self.spectrum = spec
        self.generator = gen


    def setup_tone(self):
        self.spectrum.setup_find_power_peak()

    def setup_lte_bw10_uplink(self):
        self.spectrum.setup_lte_dl_chpower(lte_bw=10, cont= 'ON')
        self.generator.set_arb_sample_clock(15.36)
        self.generator.setup_waveform_in_gen("10MHZ_FRCA13_RO_0")#TODO

    def setup_lte_bw10(self):
        self.spectrum.setup_lte_dl_chpower(lte_bw=10, cont= 'ON')
        self.generator.set_arb_sample_clock(15.36)
        self.generator.setup_lte_waveform_from_file(r'\\Ravel\r&d\Projets\Facebook\FBKD1704_OC-LTE_Integration_And_Productization\Prototypes\prelim\waveforms\etm1_1_bw10.wfm')

    def setup_tone_measure(self, center_freq_mhz, generator_power_dbm):
        self.spectrum.setup_measurement(center_freq_mhz=center_freq_mhz, span_mhz=0.5)
        self.generator.setup_output(center_freq_mhz=center_freq_mhz, power_dbm=generator_power_dbm)
        self.generator.output_enable(True, mod_enable=False)

    def setup_measure(self, center_freq_mhz, generator_power_dbm):
        self.spectrum.setup_measurement(center_freq_mhz=center_freq_mhz)
        self.generator.setup_output(center_freq_mhz=center_freq_mhz, power_dbm=generator_power_dbm)
        self.generator.output_enable(True, mod_enable=True)

    def read_output_chpower(self):
        chpower_PSD = self.spectrum.read_channel_power_and_PSD()
        return chpower_PSD[0]

    def find_peak(self):
        peak = self.spectrum.find_peak()
        return peak
