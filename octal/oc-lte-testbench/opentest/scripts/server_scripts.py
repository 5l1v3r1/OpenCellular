
from opentest.server.serverinterface import ServerInterface, LocalLaunchedServerInterface
from nute.core.testrunner import LogNames
import opentest.server.server_main as server_main
import os
from nute import utils
import __builtin__

class TerminationContext(object):
    def __init__(self, context, exception=None):
        self.context = context
        self.exception = exception

    def __enter__(self):
        for name, service in self.context.server.services.iteritems():
            service.begin_call_blocking(exception=self.exception)
        return self

    def __exit__(self, *args):
        for name, service in self.context.server.services.iteritems():
            service.end_call_blocking()


def launch(context, open_logs=False):
    server_ini = os.path.abspath(context.SERVER_INIT_FILE)
    with utils.stack_chdir(context.IMPORT_ROOT):
        context.server = LocalLaunchedServerInterface(ini_file=server_ini, logger=context.logger)

    if(open_logs):
        context.server.open_logs_request()

    context.terminate_context = TerminationContext
    with TerminationContext(context) as c:
        pass
    context.logger.info("Server launched")

def shutdown(context, force_shutdown=False):
    try:
        if context.server.is_alive():
            context.logger.info("Server is alive")
            if not context.server.KILL_IN_CLEANUP and not force_shutdown:
                context.logger.info("KILL_IN_CLEANUP is set to False, no action taken")
                return
            context.logger.info("Shutdown ...")
            server_path = os.path.join(context.LOGS_PATH, "server")
            context.server.shutdown_request(move_logs=server_path)

            #Combines the test log with the server log in master_and_server.log
            combined_path = os.path.join(context.LOGS_PATH, "master_and_server.log")
            server_log_path = os.path.join(server_path, 'server.log')
            master_log_path = os.path.join(context.LOGS_PATH, LogNames.MASTER_LOG)
            utils.log_combiner(combined_path, server_log_path, master_log_path)
        else:
            context.logger.warning("Server is not alive, no action taken")
    except AttributeError:
        context.logger.info('Unable to sjutdown server')
