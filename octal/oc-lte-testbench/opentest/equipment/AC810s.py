"""
TODO :

1) Comment code
3) Use partition for all output parsing (more robust)

"""

import telnetlib
from opentest.server.service.telnet_service import *
import re
import socket
import time

class AC810NoResponseError(Exception):
    pass

class AC810NoConnectError(Exception):
    pass

class AC810ExecutionError(Exception):
    pass

class AC810NetworkError(Exception):
    pass

class InterfaceTypeError(Exception):
    pass

class BASE_INTERFACE(object):

    def __init__(self):
        pass

    def open(self):
        raise NotImplementedError()

    def close(self):
        raise NotImplementedError()

    def send_rcv(self):
        raise NotImplementedError()

class LOCAL_TN(BASE_INTERFACE):

    def __init__(self,IP,PORT,username="",password=""):
        self.tn_handle = None
        self.addr = IP
        self.port = PORT
        self.username = username
        self.password = password

    def connect(self):
        try:
            self.tn_handle = telnetlib.Telnet(self.addr, self.port)
        except Exception as e:
            raise AC810NoConnectError("Unable to connect to Telnet host: " + e.message)

    def close(self):
        try:
            self.tn_handle.close()
        except:
            pass

    def is_connected(self):
        try:
            self.tn_handle.write("\r\n")
            # If the Telnet object is not connected, an AttributeError is raised
        except AttributeError:
            return False
        else:
            return True

    def telnet_client_connected(function):
        def check_connected(*args, **kwargs):
            _self = args[0]
            if not _self.is_connected():
                _self.connect()
            return function(*args, **kwargs)

        return check_connected

    @telnet_client_connected
    def send_rcv(self,command,timeout,kw_list):

        self.tn_handle.write(command)
        index, kw_match, output = self.tn_handle.expect(kw_list,timeout)
        return output, kw_match.group(0)


class OT_TN(BASE_INTERFACE):

    def __init__(self,tn_client):

        if type(tn_client) is TelnetServiceClient:
            self.tn_client = tn_client
        else:
            raise InterfaceTypeError("tn_client object type must be %s",TelnetServiceClient.__name__)

    def connect(self):
        pass

    def close(self):
        pass

    def send_rcv(self,command,timeout,kw_list):
        return self.tn_client.execute_command(command,timeout,kw_list)

class AC810s:

    def __init__(self,tn_interface):

        self.tn_interface = tn_interface

        self.IMEI = 'TBD'
        self.IMSI = 'TBD'
        self.RSSI = 'TBD'
        self.IP_AP = 'TBD'
        self.manuf = 'TBD'
        self.SW = 'TBD'
        self.model = 'TBD'
        self.network_list = []
        self.current_network_PLMN = 'TBD'

    def connect(self):
        try:
            self.tn_interface.connect()
        except Exception as e:
            raise AC810NoConnectError("Unable to connect to Telnet host: " + e.message)

    def check_response(self,kw,kw_list):
        assert (kw in kw_list), "Received keyword not found in expected keyword list."
        if kw=="ERROR":
            raise AC810ExecutionError("Device returned ERROR code on last command.")

    def scan_networks(self):

        if self.get_airplane_mode():
            raise AC810ExecutionError("Error with scan_networks. Cannot scan networks while device is in airplane mode.")

        cmd_output, kw = self.tn_interface.send_rcv("AT+COPS=?\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])

        networks = cmd_output[21:(len(cmd_output)-6)]
        networks = networks.replace(',,',',')
        net_list=networks.split('),(')

        self.network_list = net_list

    def get_IMEI(self):

        cmd_output, kw = self.tn_interface.send_rcv("AT+GSN\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])
        self.IMEI = cmd_output[11:(len(cmd_output)-5)]

        return self.IMEI

    def get_IMSI(self):
        cmd_output, kw = self.tn_interface.send_rcv("AT+CIMI\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])
        self.IMSI = cmd_output[12:len(cmd_output)-5]

        return self.IMSI

    def set_net_mode(self, band_ID):
        cmd_output, kw = self.tn_interface.send_rcv("AT!BAND="+band_ID+"\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])

    def get_RSSI(self):
        cmd_output, kw = self.tn_interface.send_rcv("AT+CSQ\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])
        #CSQ = cmd_output[17:len(cmd_output)-9]
        CSQ = cmd_output.partition('+CSQ: ')[-1].partition('\r\n')[0]
        CSQ = CSQ.replace(",",".")
        self.RSSI = -113+2*round(float(CSQ))

        return self.RSSI

    def get_IP(self, APN_ID):
        cmd_output, kw = self.tn_interface.send_rcv("AT+CGPADDR="+APN_ID+"\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])
        self.IP_AP =  re.findall( r'[0-9]+(?:\.[0-9]+){3}', cmd_output)[0]

        return self.IP_AP

    def get_dev_info(self):
        cmd_output, kw = self.tn_interface.send_rcv("ATI\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])

        self.manuf = cmd_output.partition('Manufacturer: ')[-1].partition('\r\n')[0]
        self.SW = cmd_output.partition('Revision: ')[-1].partition('\r\n')[0]
        self.model = cmd_output.partition('Model: ')[-1].partition('\r\n')[0]


    def set_airplane_mode(self,mode):
        command_ID = ''

        if mode:
            command_ID = '4'
        else:
            command_ID = '1'
        cmd_output, kw = self.tn_interface.send_rcv("AT+CFUN="+command_ID+"\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])

        return cmd_output

    def network_connect(self, network_PLMN):

        if self.network_presence(network_PLMN):
            cmd_output, kw = self.tn_interface.send_rcv("AT+COPS=1,2,"+network_PLMN+"\r\n",60,["OK","ERROR"])
            self.check_response(kw,["OK","ERROR"])

            if self.check_current_network() != network_PLMN:
                raise AC810NetworkError("Could not connect to specified network.")

            return True

        return False

    def network_presence(self,network_PLMN):

        if len(self.network_list)==0:
            raise AC810NetworkError("Error with network_presence.  Network list is empty.  Please try running scan_networks before using this function.")
        for network in self.network_list:
            network = network.replace("\"","").split(",")
            if len(network) > 4 and network[3]==network_PLMN:
                return True
        return False

    def check_current_network(self):

        cmd_output, kw = self.tn_interface.send_rcv("AT+COPS?\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])

        if len(cmd_output.split(',')) == 1:
            raise AC810NetworkError("Error with check_current_network.  Not currently registered to any network.")

        self.current_network_PLMN = cmd_output.replace('\"','').split(',')[2]

        return self.current_network_PLMN

    def custom_command(self,command,kw_list,timeout):
        cmd_output, kw = self.tn_interface.send_rcv(command,timeout,kw_list)
        self.check_response(kw,kw_list)

        return cmd_output

    def get_airplane_mode(self):
        cmd_output, kw = self.tn_interface.send_rcv("AT+CFUN?\r\n",60,["OK","ERROR"])
        self.check_response(kw,["OK","ERROR"])
        return cmd_output.find("4") != -1

    def close(self):
        self.tn_interface.close()

    def __str__(self):
        printout=(

                "\n\nAC810 Info \n"
                "Device manufacturer is : %s \n"
                "Device model is : %s \n"
                "Device software version is : %s \n"
                "Device IMEI is : %s \n"
                "SIM card IMSI is : %s \n"
                "Device IP from LTE AP is : %s \n"
                "Last recorded RSSI is : %s \n"
                )% (self.manuf,self.model,self.SW,self.IMEI,self.IMSI,self.IP_AP,str(self.RSSI))
        return printout
