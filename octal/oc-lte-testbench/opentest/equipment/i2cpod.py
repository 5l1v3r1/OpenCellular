from nute import utils
from opentest.server.service.base import ServiceClient
from opentest.server.service.i2cpod_service import I2CPodServiceClient
import click
import os


@click.group( help = "Function for the ATE")
def group_entry():
    pass



#Create the service for the i2cpod
##region create(port, url)
@group_entry.command('create', help = "Create the service for the i2cpod")
@click.argument('port')
@click.argument('url')
def _cmd_create(*args,**kwargs):
    create(*args,**kwargs)

@utils.capture_print
def create(port, url):
    with I2CPodServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        client.create_service()
        print("The service is created for the i2cpod")
##endregion

#Write with i2cpod
##region write(port, url,slave_addr,memory_length,slave_mem_addr,data)
@group_entry.command('write', help = "Write with i2cpod")
@click.argument('port')
@click.argument('url')
@click.argument('slave_addr')
@click.argument('memory_length') #If the device does not contain memory address, memory_length should be set at 0
@click.argument('slave_mem_addr') #If the memory_lentgh is 0, the slave memory address is omitted by i2c.exe
@click.argument('data')
def _cmd_write(*args,**kwargs):
    write(*args,**kwargs)

@utils.capture_print
def write(port, url,slave_addr,memory_length,slave_mem_addr,data):
    with I2CPodServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        function, sla_addr, mem_length, sla_mem_addr, dat =client.write(slave_addr,memory_length,slave_mem_addr,data)
        print('Function: {}\nSlave address: {}\nSlave memory address: {}\nSlave memory length: {}\nData: {}'.format(function,sla_addr,sla_mem_addr,mem_length,dat))

##endregion

#Read with i2cpod
##region read(port, url,slave_addr,memory_length,slave_mem_addr,data_length)
@group_entry.command('read', help = "Read with i2cpod")
@click.argument('port')
@click.argument('url')
@click.argument('slave_addr')
@click.argument('memory_length') #If the device does not contain memory address, memory_length should be set at 0
@click.argument('slave_mem_addr') #If the memory_lentgh is 0, the slave memory address is omitted by i2c.exe
@click.argument('data_length')
def _cmd_read(*args,**kwargs):
    read(*args,**kwargs)

@utils.capture_print
def read(port, url,slave_addr,memory_length,slave_mem_addr,data_length):
    with I2CPodServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        function, sla_addr, mem_length, sla_mem_addr, dat_length, read =client.read(slave_addr,memory_length,slave_mem_addr,data_length)
        print('Function: {}\nSlave address: {}\nSlave memory address: {}\nSlave memory length: {}\nData length: {}'.format(function,sla_addr,sla_mem_addr,mem_length,dat_length))
        print('The data read is: ' + str(read))
##endregion

if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
