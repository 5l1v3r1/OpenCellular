from opentest.server.service.base import ServiceClient
from opentest.server.service.dcsupply_service import DCSupplyServiceResponse, DCSupplyServiceClient
from script import utils
import click
import os


@click.group(help="This file contains all function use for ATE")
def group_entry():
    pass

#Create the service for the dcsupply
##region create(port, url)
@group_entry.command('create', help = "Create the service for the dcsupply")
@click.argument('port')
@click.argument('url')
def _cmd_create(*args,**kwargs):
    create(*args,**kwargs)

@utils.capture_print
def create(port, url):
    with DCSupplyServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        client.create_service()
##endregion

#Set the enability of the dcsupply
##region set_enable(port, url, set_en)
@group_entry.command('set_enable', help = "Set the enability of the dcsupply")
@click.argument('port')
@click.argument('url')
@click.argument('set_en')
def _cmd_set_enable(*args,**kwargs):
    set_enable(*args,**kwargs)

@utils.capture_print
def set_enable(port, url, set_en):
    with DCSupplyServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        enable = client.setenable(set_en)
    print("Set output: " + str(enable).strip())
##endregion

#Get the voltage of the dcsupply
##region get_voltage(port, url)
@group_entry.command('get_voltage', help = "Get the voltage of the dcsupply")
@click.argument('port')
@click.argument('url')
def _cmd_get_voltage(*args,**kwargs):
    get_voltage(*args,**kwargs)

@utils.capture_print
def get_voltage(port, url):
    with DCSupplyServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        get_vout = client.getvoltage()
    print ("Current voltage: "+ str(get_vout).strip())
##endregion

#Set the voltage of the dcsupply to the specified value
##region set_voltage(port, url, set_vout)
@group_entry.command('set_voltage', help = "Set the voltage of the dcsupply to the specified value")
@click.argument('port')
@click.argument('url')
@click.argument('set_vout')
def _cmd_set_voltage(*args,**kwargs):
    set_voltage(*args,**kwargs)

@utils.capture_print
def set_voltage(port, url, set_vout):
    with DCSupplyServiceClient(url = url, ip_server = "127.0.0.1", port = port) as client:
        voltage = client.setvoltage(set_vout)
    print("Voltage set to: " + str(voltage).strip())
##endregion


if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
