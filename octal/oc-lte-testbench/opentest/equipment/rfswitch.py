from opentest.server.service.rfswitch_service import RFSwitchServiceClient
from nute import utils
import os
import click

@click.group(help="This file contains all function use for ATE")
def group_entry():
    pass

##region create(serverport, string_ini, ini, switchcount)
@utils.capture_print
@group_entry.command('create', help="before any other function")
@click.argument('serverport')
@click.option('--string_ini', is_flag=True)
@click.argument('ini')
def _cmd_create(*args, **kwargs):
    create(*args, **kwargs)

def create(serverport, string_ini, ini):
    with RFSwitchServiceClient(url="rfswitch", ip="127.0.0.1", port=serverport) as client:
        client.create_service(string_ini=string_ini, ini=ini)

##endregion create(serverport, string_ini, ini)

##region set_switch(serverport ,patha ,pathb)
@utils.capture_print
@group_entry.command('set_switch', help="Will set the switch according")
@click.argument('serverport')
@click.argument('patha')
@click.argument('pathb')
def _cmd_set_switch(*args, **kwargs):
    set_switch(*args, **kwargs)

def set_switch(serverport ,patha ,pathb):
    with RFSwitchServiceClient(url="rfswitch", ip="127.0.0.1", port=serverport) as client:
        status, resp = client.set_switch_path(patha, pathb)
        resp.read.reverse() # Before HGFEDCBA:00010101 now with reverse : ABCDEFGH:10101000
    return resp
##endregion set_switch(serverport ,patha ,pathb)

##region read(serverport)
@utils.capture_print
@group_entry.command('read', help="Will return the switch value")
@click.argument('serverport')

def _cmd_read(*args, **kwargs):
    read(*args, **kwargs)

def read(serverport):
    with RFSwitchServiceClient(url="rfswitch", ip="127.0.0.1", port=serverport) as client:
        status, resp = client.read_state_switches()
        resp.read.reverse() # Before HGFEDCBA:00010101 now with reverse : ABCDEFGH:10101000
    return resp
##endregion read(serverport)

##region path_option(serverport)
@utils.capture_print
@group_entry.command('path_option', help="Will return all the path option")
@click.argument('serverport')

def _cmd_path_option(*args, **kwargs):
    path_option(*args, **kwargs)

def path_option(serverport):
    with RFSwitchServiceClient(url="rfswitch", ip="127.0.0.1", port=serverport) as client:
        status, resp = client.path_option()
    return resp
##endregion path_option(serverport)

##region reset(serverport)
@utils.capture_print
@group_entry.command('read', help="Will set to 0 the switch value")
@click.argument('serverport')

def _cmd_reset(*args, **kwargs):
    reset(*args, **kwargs)

def reset(serverport):
    with RFSwitchServiceClient(url="rfswitch", ip="127.0.0.1", port=serverport) as client:
        client.reset()
##endregion reset(serverport)

if __name__ == "__main__":
    # This block pauses the command line when bad arguments are passed or when the
    # main exits early.
    # This is needed when the command line exits after execution, as it gives us
    # time to see the error.
    try:
        group_entry()
    except SystemExit as e:
        os.system("pause")
        raise
