diff --git a/Transceiver52M/UHDDevice.cpp b/Transceiver52M/UHDDevice.cpp
index d139cdc..4791954 100644
--- a/Transceiver52M/UHDDevice.cpp
+++ b/Transceiver52M/UHDDevice.cpp
@@ -70,6 +70,7 @@ enum uhd_dev_type {
 	X3XX,
 	UMTRX,
 	LIMESDR,
+        OCR01,
 	NUM_USRP_TYPES,
 };
 
@@ -129,6 +130,7 @@ static struct uhd_dev_offset uhd_offsets[] = {
 	{ B210,  4, 4, B2XX_TIMING_4_4SPS, "B210 4 SPS" },
 	{ X3XX,  4, 4, 5.6567e-5, "X3XX 4 SPS"},
 	{ UMTRX, 4, 4, 5.1503e-5, "UmTRX 4 SPS" },
+	{ OCR01,  4, 1, B2XX_TIMING_4SPS, "OCR01 4/1 Tx/Rx SPS" },
 	{ LIMESDR, 4, 4, 16.5/GSMRATE, "STREAM/LimeSDR (4 SPS TX/RX)" },
 };
 #define NUM_UHD_OFFSETS (sizeof(uhd_offsets)/sizeof(uhd_offsets[0]))
@@ -184,6 +186,7 @@ static double select_rate(uhd_dev_type type, int sps,
 	case E1XX:
 	case E3XX:
 	case UMTRX:
+        case OCR01:
 	case LIMESDR:
 		return GSMRATE * sps;
 	default:
@@ -560,7 +563,7 @@ int uhd_device::set_rates(double tx_rate, double rx_rate)
 	double tx_offset, rx_offset;
 
 	/* B2XX and E1xx are the only device where we set FPGA clocking */
-	if ((dev_type == B200) || (dev_type == B210) || (dev_type == E3XX)) {
+	if ((dev_type == B200) || (dev_type == B210) || (dev_type == E3XX) || (dev_type == OCR01)) {
 		if (set_master_clk(B2XX_CLK_RT) < 0)
 			return -1;
 	} else if (dev_type == E1XX) {
@@ -673,7 +676,7 @@ bool uhd_device::parse_dev_type()
 	std::string mboard_str, dev_str;
 	uhd::property_tree::sptr prop_tree;
 	size_t usrp1_str, usrp2_str, e100_str, e110_str, e310_str, e3xx_str,
-	       b100_str, b200_str, b210_str, x300_str, x310_str, umtrx_str, limesdr_str;
+	       b100_str, b200_str, b210_str, x300_str, x310_str, umtrx_str, limesdr_str,ocr01_str;
 
 	prop_tree = usrp_dev->get_device()->get_tree();
 	dev_str = prop_tree->access<std::string>("/name").get();
@@ -691,6 +694,8 @@ bool uhd_device::parse_dev_type()
 	x300_str = mboard_str.find("X300");
 	x310_str = mboard_str.find("X310");
 	umtrx_str = dev_str.find("UmTRX");
+	ocr01_str = mboard_str.find("OCR01");
+
 	// LimeSDR is based on STREAM board, so it's advertized as such
 	limesdr_str = dev_str.find("STREAM");
 
@@ -710,6 +715,9 @@ bool uhd_device::parse_dev_type()
 	} else if (b210_str != std::string::npos) {
 		tx_window = TX_WINDOW_USRP1;
 		dev_type = B210;
+	} else if (ocr01_str != std::string::npos) {
+		tx_window = TX_WINDOW_USRP1;
+		dev_type = OCR01;
 	} else if (e100_str != std::string::npos) {
 		tx_window = TX_WINDOW_FIXED;
 		dev_type = E1XX;
@@ -748,6 +756,7 @@ bool uhd_device::parse_dev_type()
 		LOG(INFO) << "Using fixed transmit window for "
 			  << dev_str << " " << mboard_str;
 	}
+        dev_type= OCR01;
 
 	return true;
 }
@@ -812,7 +821,8 @@ int uhd_device::open(const std::string &args, int ref, bool swap_channels)
 		dev_type = B2XX_MCBTS;
 		chans = 1;
 	} else if (chans == 2) {
-		if (dev_type == B210) {
+		//if (dev_type == B210) {
+		if (dev_type == OCR01) {
 		} else if (dev_type == UMTRX) {
 			uhd::usrp::subdev_spec_t subdev_spec(swap_channels?"B:0 A:0":"A:0 B:0");
 			usrp_dev->set_tx_subdev_spec(subdev_spec);
@@ -926,6 +936,7 @@ int uhd_device::open(const std::string &args, int ref, bool swap_channels)
 	case E1XX:
 	case E3XX:
 	case LIMESDR:
+        case OCR01:
 	default:
 		break;
 	}
